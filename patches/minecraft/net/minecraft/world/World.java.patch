--- a/net/minecraft/world/World.java
+++ b/net/minecraft/world/World.java
@@ -17,7 +17,6 @@
 import net.minecraft.block.Blocks;
 import net.minecraft.block.Material;
 import net.minecraft.block.entity.BlockEntity;
-import net.minecraft.block.entity.BlockEntityType;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.damage.DamageSource;
@@ -65,13 +64,13 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class World implements IWorld, AutoCloseable {
+public abstract class World extends net.minecraftforge.common.capabilities.CapabilityProvider<World> implements IWorld, AutoCloseable, net.minecraftforge.common.extensions.IForgeWorld {
    protected static final Logger LOGGER = LogManager.getLogger();
    private static final Direction[] DIRECTIONS = Direction.values();
    public final List<BlockEntity> blockEntities = Lists.newArrayList();
    public final List<BlockEntity> tickingBlockEntities = Lists.newArrayList();
    protected final List<BlockEntity> pendingBlockEntities = Lists.newArrayList();
-   protected final List<BlockEntity> unloadedBlockEntities = Lists.newArrayList();
+   protected final java.util.Set<BlockEntity> unloadedBlockEntities = java.util.Collections.newSetFromMap(new java.util.IdentityHashMap<>()); // Forge: faster "contains" makes removal much more efficient
    private final Thread thread;
    private int ambientDarkness;
    protected int lcgBlockSeed = (new Random()).nextInt();
@@ -89,8 +88,12 @@
    protected boolean iteratingTickingBlockEntities;
    private final WorldBorder border;
    private final BiomeAccess biomeAccess;
+   public boolean restoringBlockSnapshots = false;
+   public boolean captureBlockSnapshots = false;
+   public java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot>();
 
    protected World(LevelProperties info, DimensionType dimType, BiFunction<World, Dimension, ChunkManager> provider, Profiler profilerIn, boolean remote) {
+      super(World.class);
       this.profiler = profilerIn;
       this.properties = info;
       this.dimension = dimType.create(this);
@@ -161,23 +164,51 @@
       } else {
          WorldChunk chunk = this.getWorldChunk(pos);
          Block block = newState.getBlock();
+
+         pos = pos.toImmutable(); // Forge - prevent mutable BlockPos leaks
+         net.minecraftforge.common.util.BlockSnapshot blockSnapshot = null;
+         if (this.captureBlockSnapshots && !this.isClient) {
+            blockSnapshot = net.minecraftforge.common.util.BlockSnapshot.getBlockSnapshot(this, pos, flags);
+            this.capturedBlockSnapshots.add(blockSnapshot);
+         }
+
+         BlockState old = getBlockState(pos);
+         int oldLight = old.getLightValue(this, pos);
+         int oldOpacity = old.getOpacity(this, pos);
+
          BlockState blockstate = chunk.setBlockState(pos, newState, (flags & 64) != 0);
          if (blockstate == null) {
+            if (blockSnapshot != null) this.capturedBlockSnapshots.remove(blockSnapshot);
             return false;
          } else {
             BlockState blockstate1 = this.getBlockState(pos);
-            if (blockstate1 != blockstate && (blockstate1.getOpacity(this, pos) != blockstate.getOpacity(this, pos) || blockstate1.getLuminance() != blockstate.getLuminance() || blockstate1.hasSidedTransparency() || blockstate.hasSidedTransparency())) {
+            if (blockstate1 != blockstate && (blockstate1.getOpacity(this, pos) != oldOpacity || blockstate1.getLightValue(this, pos) != oldLight || blockstate1.hasSidedTransparency() || blockstate.hasSidedTransparency())) {
                this.profiler.push("queueCheckLight");
                this.getChunkManager().getLightingProvider().checkBlock(pos);
                this.profiler.pop();
             }
 
+            if (blockSnapshot == null) { // Don't notify clients or update physics while capturing blockstates
+               this.markAndNotifyBlock(pos, chunk, blockstate, newState, flags);
+            }
+            return true;
+         }
+      }
+   }
+
+   // Split off from original setBlockState(BlockPos, BlockState, int) method in order to directly send client and physic updates
+   public void markAndNotifyBlock(BlockPos pos, @Nullable WorldChunk chunk, BlockState blockstate, BlockState newState, int flags)
+   {
+      Block block = newState.getBlock();
+      BlockState blockstate1 = getBlockState(pos);
+      {
+         {
             if (blockstate1 == newState) {
                if (blockstate != blockstate1) {
                   this.checkBlockRerender(pos, blockstate, blockstate1);
                }
 
-               if ((flags & 2) != 0 && (!this.isClient || (flags & 4) == 0) && (this.isClient || chunk.getLevelType() != null && chunk.getLevelType().isAfter(ChunkHolder.LevelType.TICKING))) {
+               if ((flags & 2) != 0 && (!this.isClient || (flags & 4) == 0) && (this.isClient || chunk == null || chunk.getLevelType() != null && chunk.getLevelType().isAfter(ChunkHolder.LevelType.TICKING))) {
                   this.updateListeners(pos, blockstate, newState, flags);
                }
 
@@ -197,8 +228,6 @@
 
                this.onBlockChanged(pos, blockstate, blockstate1);
             }
-
-            return true;
          }
       }
    }
@@ -213,13 +242,13 @@
 
    public boolean breakBlock(BlockPos p_225521_1_, boolean p_225521_2_, @Nullable Entity p_225521_3_) {
       BlockState blockstate = this.getBlockState(p_225521_1_);
-      if (blockstate.isAir()) {
+      if (blockstate.isAir(this, p_225521_1_)) {
          return false;
       } else {
          FluidState ifluidstate = this.getFluidState(p_225521_1_);
          this.playLevelEvent(2001, p_225521_1_, Block.getRawIdFromState(blockstate));
          if (p_225521_2_) {
-            BlockEntity tileentity = blockstate.getBlock().hasBlockEntity() ? this.getBlockEntity(p_225521_1_) : null;
+            BlockEntity tileentity = blockstate.hasTileEntity() ? this.getBlockEntity(p_225521_1_) : null;
             Block.dropStacks(blockstate, this, p_225521_1_, tileentity, p_225521_3_, ItemStack.EMPTY);
          }
 
@@ -244,6 +273,8 @@
    }
 
    public void updateNeighborsAlways(BlockPos pos, Block blockIn) {
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, pos, this.getBlockState(pos), java.util.EnumSet.allOf(Direction.class), false).isCanceled())
+         return;
       this.updateNeighbor(pos.west(), blockIn, pos);
       this.updateNeighbor(pos.east(), blockIn, pos);
       this.updateNeighbor(pos.down(), blockIn, pos);
@@ -253,6 +284,11 @@
    }
 
    public void updateNeighborsExcept(BlockPos pos, Block blockType, Direction skipSide) {
+      java.util.EnumSet<Direction> directions = java.util.EnumSet.allOf(Direction.class);
+      directions.remove(skipSide);
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, pos, this.getBlockState(pos), directions, false).isCanceled())
+         return;
+
       if (skipSide != Direction.WEST) {
          this.updateNeighbor(pos.west(), blockType, pos);
       }
@@ -290,9 +326,9 @@
             CrashReportSection crashreportcategory = crashreport.addElement("Block being updated");
             crashreportcategory.add("Source block type", () -> {
                try {
-                  return String.format("ID #%s (%s // %s)", Registry.BLOCK.getId(blockIn), blockIn.getTranslationKey(), blockIn.getClass().getCanonicalName());
+                  return String.format("ID #%s (%s // %s)", blockIn.getRegistryName(), blockIn.getTranslationKey(), blockIn.getClass().getCanonicalName());
                } catch (Throwable var2) {
-                  return "ID #" + Registry.BLOCK.getId(blockIn);
+                  return "ID #" + blockIn.getRegistryName();
                }
             });
             CrashReportSection.addBlockInfo(crashreportcategory, pos, blockstate);
@@ -339,7 +375,7 @@
    }
 
    public boolean isDay() {
-      return this.dimension.getType() == DimensionType.OVERWORLD && this.ambientDarkness < 4;
+      return this.dimension.isDaytime();
    }
 
    public boolean isNight() {
@@ -376,10 +412,12 @@
    }
 
    public boolean addBlockEntity(BlockEntity tile) {
+      if (tile.getWorld() != this) tile.setLocation(this, tile.getPos()); // Forge - set the world early as vanilla doesn't set it until next tick
       if (this.iteratingTickingBlockEntities) {
          LOGGER.error("Adding block entity while ticking: {} @ {}", () -> {
             return Registry.BLOCK_ENTITY_TYPE.getId(tile.getType());
          }, tile::getPos);
+         return pendingBlockEntities.add(tile); // Forge: wait to add new TE if we're currently processing existing ones
       }
 
       boolean flag = this.blockEntities.add(tile);
@@ -387,6 +425,8 @@
          this.tickingBlockEntities.add(tile);
       }
 
+      tile.onLoad();
+
       if (this.isClient) {
          BlockPos blockpos = tile.getPos();
          BlockState blockstate = this.getBlockState(blockpos);
@@ -398,6 +438,7 @@
 
    public void addBlockEntities(Collection<BlockEntity> tileEntityCollection) {
       if (this.iteratingTickingBlockEntities) {
+         tileEntityCollection.stream().filter(te -> te.getWorld() != this).forEach(te -> te.setLocation(this, te.getPos())); // Forge - set the world early as vanilla doesn't set it until next tick
          this.pendingBlockEntities.addAll(tileEntityCollection);
       } else {
          for(BlockEntity tileentity : tileEntityCollection) {
@@ -410,13 +451,14 @@
    public void tickBlockEntities() {
       Profiler iprofiler = this.getProfiler();
       iprofiler.push("blockEntities");
+      this.iteratingTickingBlockEntities = true;// Forge: Move above remove to prevent CMEs
       if (!this.unloadedBlockEntities.isEmpty()) {
+         this.unloadedBlockEntities.forEach(e -> e.onChunkUnloaded());
          this.tickingBlockEntities.removeAll(this.unloadedBlockEntities);
          this.blockEntities.removeAll(this.unloadedBlockEntities);
          this.unloadedBlockEntities.clear();
       }
 
-      this.iteratingTickingBlockEntities = true;
       Iterator<BlockEntity> iterator = this.tickingBlockEntities.iterator();
 
       while(iterator.hasNext()) {
@@ -425,8 +467,9 @@
             BlockPos blockpos = tileentity.getPos();
             if (this.chunkManager.shouldTickBlock(blockpos) && this.getWorldBorder().contains(blockpos)) {
                try {
+                  net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackStart(tileentity);
                   iprofiler.push(() -> {
-                     return String.valueOf((Object)BlockEntityType.getId(tileentity.getType()));
+                     return String.valueOf(tileentity.getType().getRegistryName());
                   });
                   if (tileentity.getType().supports(this.getBlockState(blockpos).getBlock())) {
                      ((Tickable)tileentity).tick();
@@ -439,8 +482,16 @@
                   CrashReport crashreport = CrashReport.create(throwable, "Ticking block entity");
                   CrashReportSection crashreportcategory = crashreport.addElement("Block entity being ticked");
                   tileentity.populateCrashReport(crashreportcategory);
+                  if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringTileEntities.get()) {
+                     LogManager.getLogger().fatal("{}", crashreport.asString());
+                     tileentity.markRemoved();
+                     this.removeBlockEntity(tileentity.getPos());
+                  } else
                   throw new CrashException(crashreport);
                }
+               finally {
+                  net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackEnd(tileentity);
+               }
             }
          }
 
@@ -448,7 +499,10 @@
             iterator.remove();
             this.blockEntities.remove(tileentity);
             if (this.isChunkLoaded(tileentity.getPos())) {
-               this.getWorldChunk(tileentity.getPos()).removeBlockEntity(tileentity.getPos());
+               //Forge: Bugfix: If we set the tile entity it immediately sets it in the chunk, so we could be desyned
+               WorldChunk chunk = this.getWorldChunk(tileentity.getPos());
+               if (chunk.getBlockEntity(tileentity.getPos(), WorldChunk.CreationType.CHECK) == tileentity)
+                  chunk.removeBlockEntity(tileentity.getPos());
             }
          }
       }
@@ -480,12 +534,15 @@
 
    public void tickEntity(Consumer<Entity> consumerEntity, Entity entityIn) {
       try {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackStart(entityIn);
          consumerEntity.accept(entityIn);
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.create(throwable, "Ticking entity");
          CrashReportSection crashreportcategory = crashreport.addElement("Entity being ticked");
          entityIn.populateCrashReport(crashreportcategory);
          throw new CrashException(crashreport);
+      } finally {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackEnd(entityIn);
       }
    }
 
@@ -502,7 +559,7 @@
             for(int l1 = k; l1 < l; ++l1) {
                for(int i2 = i1; i2 < j1; ++i2) {
                   BlockState blockstate = this.getBlockState(blockpos$pooledmutable.set(k1, l1, i2));
-                  if (!blockstate.isAir()) {
+                  if (!blockstate.isAir(this, blockpos$pooledmutable)) {
                      boolean flag = true;
                      return flag;
                   }
@@ -526,8 +583,8 @@
             for(int k1 = i; k1 < j; ++k1) {
                for(int l1 = k; l1 < l; ++l1) {
                   for(int i2 = i1; i2 < j1; ++i2) {
-                     Block block = this.getBlockState(blockpos$pooledmutable.set(k1, l1, i2)).getBlock();
-                     if (block == Blocks.FIRE || block == Blocks.LAVA) {
+                     BlockState state = this.getBlockState(blockpos$pooledmutable.set(k1, l1, i2));
+                     if (state.isBurning(this, blockpos$pooledmutable)) {
                         boolean flag = true;
                         return flag;
                      }
@@ -597,6 +654,7 @@
       if (damageSourceIn != null) {
          explosion.setDamageSource(damageSourceIn);
       }
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
 
       explosion.collectBlocksAndDamageEntities();
       explosion.affectWorld(true);
@@ -657,6 +715,7 @@
 
    public void setBlockEntity(BlockPos pos, @Nullable BlockEntity tileEntityIn) {
       if (!isHeightInvalid(pos)) {
+         pos = pos.toImmutable(); // Forge - prevent mutable BlockPos leaks
          if (tileEntityIn != null && !tileEntityIn.isRemoved()) {
             if (this.iteratingTickingBlockEntities) {
                tileEntityIn.setLocation(this, pos);
@@ -672,7 +731,8 @@
 
                this.pendingBlockEntities.add(tileEntityIn);
             } else {
-               this.getWorldChunk(pos).setBlockEntity(pos, tileEntityIn);
+               WorldChunk chunk = this.getWorldChunk(pos);
+               if (chunk != null) chunk.setBlockEntity(pos, tileEntityIn);
                this.addBlockEntity(tileEntityIn);
             }
          }
@@ -685,6 +745,8 @@
       if (tileentity != null && this.iteratingTickingBlockEntities) {
          tileentity.markRemoved();
          this.pendingBlockEntities.remove(tileentity);
+         if (!(tileentity instanceof Tickable)) //Forge: If they are not tickable they wont be removed in the update loop.
+            this.blockEntities.remove(tileentity);
       } else {
          if (tileentity != null) {
             this.pendingBlockEntities.remove(tileentity);
@@ -694,7 +756,7 @@
 
          this.getWorldChunk(pos).removeBlockEntity(pos);
       }
-
+      this.updateHorizontalAdjacent(pos, getBlockState(pos).getBlock()); //Notify neighbors of changes
    }
 
    public boolean canSetBlock(BlockPos pos) {
@@ -719,9 +781,14 @@
 
    public void setMobSpawnOptions(boolean hostile, boolean peaceful) {
       this.getChunkManager().setMobSpawnOptions(hostile, peaceful);
+      this.getDimension().setAllowedSpawnTypes(hostile, peaceful);
    }
 
    protected void initWeatherGradients() {
+      this.dimension.calculateInitialWeather();
+   }
+
+   public void calculateInitialWeatherBody() {
       if (this.properties.isRaining()) {
          this.rainGradient = 1.0F;
          if (this.properties.isThundering()) {
@@ -743,10 +810,10 @@
    public List<Entity> getEntities(@Nullable Entity entityIn, Box boundingBox, @Nullable Predicate<? super Entity> predicate) {
       this.getProfiler().visit("getEntities");
       List<Entity> list = Lists.newArrayList();
-      int i = MathHelper.floor((boundingBox.x1 - 2.0D) / 16.0D);
-      int j = MathHelper.floor((boundingBox.x2 + 2.0D) / 16.0D);
-      int k = MathHelper.floor((boundingBox.z1 - 2.0D) / 16.0D);
-      int l = MathHelper.floor((boundingBox.z2 + 2.0D) / 16.0D);
+      int i = MathHelper.floor((boundingBox.x1 - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.floor((boundingBox.x2 + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.floor((boundingBox.z1 - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.floor((boundingBox.z2 + getMaxEntityRadius()) / 16.0D);
 
       for(int i1 = i; i1 <= j; ++i1) {
          for(int j1 = k; j1 <= l; ++j1) {
@@ -762,10 +829,10 @@
 
    public <T extends Entity> List<T> getEntities(@Nullable EntityType<T> type, Box boundingBox, Predicate<? super T> predicate) {
       this.getProfiler().visit("getEntities");
-      int i = MathHelper.floor((boundingBox.x1 - 2.0D) / 16.0D);
-      int j = MathHelper.ceil((boundingBox.x2 + 2.0D) / 16.0D);
-      int k = MathHelper.floor((boundingBox.z1 - 2.0D) / 16.0D);
-      int l = MathHelper.ceil((boundingBox.z2 + 2.0D) / 16.0D);
+      int i = MathHelper.floor((boundingBox.x1 - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.ceil((boundingBox.x2 + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.floor((boundingBox.z1 - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.ceil((boundingBox.z2 + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
 
       for(int i1 = i; i1 < j; ++i1) {
@@ -782,10 +849,10 @@
 
    public <T extends Entity> List<T> getEntities(Class<? extends T> clazz, Box aabb, @Nullable Predicate<? super T> filter) {
       this.getProfiler().visit("getEntities");
-      int i = MathHelper.floor((aabb.x1 - 2.0D) / 16.0D);
-      int j = MathHelper.ceil((aabb.x2 + 2.0D) / 16.0D);
-      int k = MathHelper.floor((aabb.z1 - 2.0D) / 16.0D);
-      int l = MathHelper.ceil((aabb.z2 + 2.0D) / 16.0D);
+      int i = MathHelper.floor((aabb.x1 - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.ceil((aabb.x2 + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.floor((aabb.z1 - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.ceil((aabb.z2 + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
       ChunkManager abstractchunkprovider = this.getChunkManager();
 
@@ -803,10 +870,10 @@
 
    public <T extends Entity> List<T> getEntitiesIncludingUngeneratedChunks(Class<? extends T> p_225316_1_, Box p_225316_2_, @Nullable Predicate<? super T> p_225316_3_) {
       this.getProfiler().visit("getLoadedEntities");
-      int i = MathHelper.floor((p_225316_2_.x1 - 2.0D) / 16.0D);
-      int j = MathHelper.ceil((p_225316_2_.x2 + 2.0D) / 16.0D);
-      int k = MathHelper.floor((p_225316_2_.z1 - 2.0D) / 16.0D);
-      int l = MathHelper.ceil((p_225316_2_.z2 + 2.0D) / 16.0D);
+      int i = MathHelper.floor((p_225316_2_.x1 - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.ceil((p_225316_2_.x2 + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.floor((p_225316_2_.z1 - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.ceil((p_225316_2_.z2 + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
       ChunkManager abstractchunkprovider = this.getChunkManager();
 
@@ -833,7 +900,8 @@
    }
 
    public int getSeaLevel() {
-      return 63;
+      // FORGE: Allow modded dimensions to customize this value via Dimension
+      return this.getDimension().getSeaLevel();
    }
 
    public World getWorld() {
@@ -881,7 +949,7 @@
 
    public int getEmittedRedstonePower(BlockPos pos, Direction facing) {
       BlockState blockstate = this.getBlockState(pos);
-      return blockstate.isSimpleFullBlock(this, pos) ? this.getReceivedStrongRedstonePower(pos) : blockstate.getWeakRedstonePower(this, pos, facing);
+      return blockstate.shouldCheckWeakPower(this, pos, facing) ? this.getReceivedStrongRedstonePower(pos) : blockstate.getWeakRedstonePower(this, pos, facing);
    }
 
    public boolean isReceivingRedstonePower(BlockPos pos) {
@@ -926,7 +994,7 @@
    }
 
    public long getSeed() {
-      return this.properties.getSeed();
+      return this.dimension.getSeed();
    }
 
    public long getTime() {
@@ -934,11 +1002,11 @@
    }
 
    public long getTimeOfDay() {
-      return this.properties.getTimeOfDay();
+      return this.dimension.getWorldTime();
    }
 
    public void setTimeOfDay(long time) {
-      this.properties.setTimeOfDay(time);
+      this.dimension.setWorldTime(time);
    }
 
    protected void tickTime() {
@@ -950,7 +1018,7 @@
    }
 
    public BlockPos getSpawnPos() {
-      BlockPos blockpos = new BlockPos(this.properties.getSpawnX(), this.properties.getSpawnY(), this.properties.getSpawnZ());
+      BlockPos blockpos = this.dimension.getSpawnPoint();
       if (!this.getWorldBorder().contains(blockpos)) {
          blockpos = this.getTopPosition(Heightmap.Type.MOTION_BLOCKING, new BlockPos(this.getWorldBorder().getCenterX(), 0.0D, this.getWorldBorder().getCenterZ()));
       }
@@ -959,10 +1027,14 @@
    }
 
    public void setSpawnPos(BlockPos pos) {
-      this.properties.setSpawnPos(pos);
+      this.dimension.setSpawnPoint(pos);
    }
 
    public boolean canPlayerModifyAt(PlayerEntity player, BlockPos pos) {
+      return dimension.canMineBlock(player, pos);
+   }
+
+   public boolean canMineBlockBody(PlayerEntity player, BlockPos pos) {
       return true;
    }
 
@@ -1030,8 +1102,7 @@
    }
 
    public boolean hasHighHumidity(BlockPos pos) {
-      Biome biome = this.getBiome(pos);
-      return biome.hasHighHumidity();
+      return this.dimension.isHighHumidity(pos);
    }
 
    @Nullable
@@ -1045,7 +1116,7 @@
    }
 
    public int getEffectiveHeight() {
-      return this.dimension.isNether() ? 128 : 256;
+      return this.dimension.getActualHeight();
    }
 
    public CrashReportSection addDetailsToCrashReport(CrashReport report) {
@@ -1076,16 +1147,15 @@
    public abstract Scoreboard getScoreboard();
 
    public void updateHorizontalAdjacent(BlockPos pos, Block blockIn) {
-      for(Direction direction : Direction.Type.HORIZONTAL) {
+      for(Direction direction : Direction.values()) { //Forge: TODO: change to VALUES once ATed
          BlockPos blockpos = pos.offset(direction);
          if (this.isChunkLoaded(blockpos)) {
             BlockState blockstate = this.getBlockState(blockpos);
-            if (blockstate.getBlock() == Blocks.COMPARATOR) {
-               blockstate.neighborUpdate(this, blockpos, blockIn, pos, false);
-            } else if (blockstate.isSimpleFullBlock(this, blockpos)) {
+            blockstate.onNeighborChange(this, blockpos, pos);
+            if (blockstate.isSimpleFullBlock(this, blockpos)) {
                blockpos = blockpos.offset(direction);
                blockstate = this.getBlockState(blockpos);
-               if (blockstate.getBlock() == Blocks.COMPARATOR) {
+               if (blockstate.getWeakChanges(this, blockpos)) {
                   blockstate.neighborUpdate(this, blockpos, blockIn, pos, false);
                }
             }
@@ -1153,4 +1223,16 @@
    public BiomeAccess getBiomeAccess() {
       return this.biomeAccess;
    }
+
+   private double maxEntityRadius = 2.0D;
+   @Override
+   public double getMaxEntityRadius() {
+      return maxEntityRadius;
+   }
+   @Override
+   public double increaseMaxEntityRadius(double value) {
+      if (value > maxEntityRadius)
+         maxEntityRadius = value;
+      return maxEntityRadius;
+   }
 }
