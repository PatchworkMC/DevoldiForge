--- a/net/minecraft/world/gen/feature/AbstractTreeFeature.java
+++ b/net/minecraft/world/gen/feature/AbstractTreeFeature.java
@@ -34,6 +34,8 @@
    }
 
    protected static boolean canTreeReplace(TestableWorld p_214587_0_, BlockPos p_214587_1_) {
+      if (p_214587_0_ instanceof net.minecraft.world.WorldView) // FORGE: Redirect to state method when possible
+         return p_214587_0_.testBlockState(p_214587_1_, state -> state.canBeReplacedByLogs((net.minecraft.world.WorldView)p_214587_0_, p_214587_1_));
       return p_214587_0_.testBlockState(p_214587_1_, (p_214573_0_) -> {
          Block block = p_214573_0_.getBlock();
          return p_214573_0_.isAir() || p_214573_0_.matches(BlockTags.LEAVES) || isDirt(block) || block.matches(BlockTags.LOGS) || block.matches(BlockTags.SAPLINGS) || block == Blocks.VINE;
@@ -41,6 +43,8 @@
    }
 
    public static boolean isAir(TestableWorld worldIn, BlockPos pos) {
+      if (worldIn instanceof net.minecraft.world.BlockView) // FORGE: Redirect to state method when possible
+        return worldIn.testBlockState(pos, state -> state.isAir((net.minecraft.world.BlockView)worldIn, pos));
       return worldIn.testBlockState(pos, BlockState::isAir);
    }
 
@@ -64,17 +68,27 @@
    }
 
    public static boolean isAirOrLeaves(TestableWorld worldIn, BlockPos pos) {
+      if (worldIn instanceof net.minecraft.world.WorldView) // FORGE: Redirect to state method when possible
+         return worldIn.testBlockState(pos, state -> state.canBeReplacedByLeaves((net.minecraft.world.WorldView)worldIn, pos));
       return worldIn.testBlockState(pos, (p_227223_0_) -> {
          return p_227223_0_.isAir() || p_227223_0_.matches(BlockTags.LEAVES);
       });
    }
 
+   @Deprecated //Forge: moved to isSoil
    public static boolean isNaturalDirtOrGrass(TestableWorld worldIn, BlockPos pos) {
       return worldIn.testBlockState(pos, (p_227221_0_) -> {
          return isDirt(p_227221_0_.getBlock());
       });
    }
 
+   protected static boolean isSoil(TestableWorld reader, BlockPos pos, net.minecraftforge.common.IPlantable sapling) {
+      if (!(reader instanceof net.minecraft.world.BlockView) || sapling == null)
+         return isNaturalDirtOrGrass(reader, pos);
+      return reader.testBlockState(pos, state -> state.canSustainPlant((net.minecraft.world.BlockView)reader, pos, Direction.UP, sapling));
+   }
+
+   @Deprecated //Forge: moved to isSoilOrFarm
    protected static boolean isDirtOrGrass(TestableWorld worldIn, BlockPos pos) {
       return worldIn.testBlockState(pos, (p_227220_0_) -> {
          Block block = p_227220_0_.getBlock();
@@ -82,6 +96,12 @@
       });
    }
 
+   protected static boolean isSoilOrFarm(TestableWorld reader, BlockPos pos, net.minecraftforge.common.IPlantable sapling) {
+      if (!(reader instanceof net.minecraft.world.BlockView) || sapling == null)
+         return isDirtOrGrass(reader, pos);
+      return reader.testBlockState(pos, state -> state.canSustainPlant((net.minecraft.world.BlockView)reader, pos, Direction.UP, sapling));
+   }
+
    public static boolean isReplaceablePlant(TestableWorld p_214576_0_, BlockPos p_214576_1_) {
       return p_214576_0_.testBlockState(p_214576_1_, (p_227218_0_) -> {
          Material material = p_227218_0_.getMaterial();
@@ -89,6 +109,7 @@
       });
    }
 
+   @Deprecated //Forge: moved to setDirtAt
    protected void setToDirt(ModifiableTestableWorld p_214584_1_, BlockPos p_214584_2_) {
       if (!isNaturalDirt(p_214584_1_, p_214584_2_)) {
          this.setBlockState(p_214584_1_, p_214584_2_, Blocks.DIRT.getDefaultState());
@@ -116,6 +137,13 @@
       }
    }
 
+   protected void setDirtAt(ModifiableTestableWorld reader, BlockPos pos, BlockPos origin) {
+      if (!(reader instanceof IWorld)) {
+         setToDirt(reader, pos);
+         return;
+      }
+      ((IWorld)reader).getBlockState(pos).onPlantGrow((IWorld)reader, pos, origin);
+   }
    protected void setBlockState(ModifiableWorld worldIn, BlockPos pos, BlockState state) {
       this.setBlockStateWithoutUpdatingNeighbors(worldIn, pos, state);
    }
