--- a/net/minecraft/world/gen/feature/Feature.java
+++ b/net/minecraft/world/gen/feature/Feature.java
@@ -22,7 +22,7 @@
 import net.minecraft.world.gen.chunk.ChunkGenerator;
 import net.minecraft.world.gen.chunk.ChunkGeneratorConfig;
 
-public abstract class Feature<FC extends FeatureConfig> {
+public abstract class Feature<FC extends FeatureConfig> extends net.minecraftforge.registries.ForgeRegistryEntry<Feature<?>> {
    public static final StructureFeature<DefaultFeatureConfig> PILLAGER_OUTPOST = register("pillager_outpost", new PillagerOutpostFeature(DefaultFeatureConfig::deserialize));
    public static final StructureFeature<MineshaftFeatureConfig> MINESHAFT = register("mineshaft", new MineshaftFeature(MineshaftFeatureConfig::deserialize));
    public static final StructureFeature<DefaultFeatureConfig> WOODLAND_MANSION = register("woodland_mansion", new WoodlandMansionFeature(DefaultFeatureConfig::deserialize));
@@ -40,12 +40,12 @@
    public static final StructureFeature<VillageFeatureConfig> VILLAGE = register("village", new VillageFeature(VillageFeatureConfig::deserialize));
    public static final Feature<DefaultFeatureConfig> NO_OP = register("no_op", new NoOpFeature(DefaultFeatureConfig::deserialize));
    public static final Feature<BranchedTreeFeatureConfig> NORMAL_TREE = register("normal_tree", new OakTreeFeature(BranchedTreeFeatureConfig::deserialize));
-   public static final Feature<BranchedTreeFeatureConfig> ACACIA_TREE = register("acacia_tree", new AcaciaTreeFeature(BranchedTreeFeatureConfig::deserialize));
+   public static final Feature<BranchedTreeFeatureConfig> ACACIA_TREE = register("acacia_tree", new AcaciaTreeFeature(BranchedTreeFeatureConfig::deserializeAcacia));
    public static final Feature<BranchedTreeFeatureConfig> FANCY_TREE = register("fancy_tree", new LargeOakTreeFeature(BranchedTreeFeatureConfig::deserialize));
-   public static final Feature<TreeFeatureConfig> JUNGLE_GROUND_BUSH = register("jungle_ground_bush", new JungleGroundBushFeature(TreeFeatureConfig::deserialize));
-   public static final Feature<MegaTreeFeatureConfig> DARK_OAK_TREE = register("dark_oak_tree", new DarkOakTreeFeature(MegaTreeFeatureConfig::deserialize));
-   public static final Feature<MegaTreeFeatureConfig> MEGA_JUNGLE_TREE = register("mega_jungle_tree", new MegaJungleTreeFeature(MegaTreeFeatureConfig::deserialize));
-   public static final Feature<MegaTreeFeatureConfig> MEGA_SPRUCE_TREE = register("mega_spruce_tree", new MegaPineTreeFeature(MegaTreeFeatureConfig::deserialize));
+   public static final Feature<TreeFeatureConfig> JUNGLE_GROUND_BUSH = register("jungle_ground_bush", new JungleGroundBushFeature(TreeFeatureConfig::deserializeJungle));
+   public static final Feature<MegaTreeFeatureConfig> DARK_OAK_TREE = register("dark_oak_tree", new DarkOakTreeFeature(MegaTreeFeatureConfig::deserializeDarkOak));
+   public static final Feature<MegaTreeFeatureConfig> MEGA_JUNGLE_TREE = register("mega_jungle_tree", new MegaJungleTreeFeature(MegaTreeFeatureConfig::deserializeJungle));
+   public static final Feature<MegaTreeFeatureConfig> MEGA_SPRUCE_TREE = register("mega_spruce_tree", new MegaPineTreeFeature(MegaTreeFeatureConfig::deserializeSpruce));
    public static final FlowerFeature<RandomPatchFeatureConfig> FLOWER = register("flower", new DefaultFlowerFeature(RandomPatchFeatureConfig::deserialize));
    public static final Feature<RandomPatchFeatureConfig> RANDOM_PATCH = register("random_patch", new RandomPatchFeature(RandomPatchFeatureConfig::deserialize));
    public static final Feature<BlockPileFeatureConfig> BLOCK_PILE = register("block_pile", new AbstractPileFeature(BlockPileFeatureConfig::deserialize));
@@ -88,7 +88,8 @@
    public static final Feature<RandomBooleanFeatureConfig> RANDOM_BOOLEAN_SELECTOR = register("random_boolean_selector", new RandomBooleanFeature(RandomBooleanFeatureConfig::deserialize));
    public static final Feature<DecoratedFeatureConfig> DECORATED = register("decorated", new DecoratedFeature(DecoratedFeatureConfig::deserialize));
    public static final Feature<DecoratedFeatureConfig> DECORATED_FLOWER = register("decorated_flower", new DecoratedFlowerFeature(DecoratedFeatureConfig::deserialize));
-   public static final BiMap<String, StructureFeature<?>> STRUCTURES = Util.make(HashBiMap.create(), (p_205170_0_) -> {
+   public static final BiMap<String, StructureFeature<?>> STRUCTURES = Util.make(net.minecraftforge.registries.GameData.getStructureMap(), (p_205170_0_) -> {
+      if (true) return; // Forge: This is now a slave map to the feature registry, leave this code here to reduce patch size
       p_205170_0_.put("Pillager_Outpost".toLowerCase(Locale.ROOT), PILLAGER_OUTPOST);
       p_205170_0_.put("Mineshaft".toLowerCase(Locale.ROOT), MINESHAFT);
       p_205170_0_.put("Mansion".toLowerCase(Locale.ROOT), WOODLAND_MANSION);
@@ -139,10 +140,10 @@
    }
 
    protected static boolean isStone(Block blockIn) {
-      return blockIn == Blocks.STONE || blockIn == Blocks.GRANITE || blockIn == Blocks.DIORITE || blockIn == Blocks.ANDESITE;
+      return net.minecraftforge.common.Tags.Blocks.STONE.contains(blockIn);
    }
 
    protected static boolean isDirt(Block blockIn) {
-      return blockIn == Blocks.DIRT || blockIn == Blocks.GRASS_BLOCK || blockIn == Blocks.PODZOL || blockIn == Blocks.COARSE_DIRT || blockIn == Blocks.MYCELIUM;
+      return net.minecraftforge.common.Tags.Blocks.DIRT.contains(blockIn);
    }
 }
