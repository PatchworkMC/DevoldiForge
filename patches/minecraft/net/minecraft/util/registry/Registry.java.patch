--- a/net/minecraft/util/registry/Registry.java
+++ b/net/minecraft/util/registry/Registry.java
@@ -41,7 +41,6 @@
 import net.minecraft.sound.SoundEvents;
 import net.minecraft.stat.StatType;
 import net.minecraft.stat.Stats;
-import net.minecraft.structure.StructureFeatures;
 import net.minecraft.structure.StructurePieceType;
 import net.minecraft.structure.pool.StructurePoolElementType;
 import net.minecraft.structure.processor.StructureProcessorType;
@@ -72,47 +71,51 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+/*
+ * Attention Modders: This SHOULD NOT be used, you should use ForgeRegistries instead. As it has a cleaner modder facing API.
+ * We will be wrapping all of these in our API as necessary for syncing and management.
+ */
 public abstract class Registry<T> implements IndexedIterable<T> {
    protected static final Logger LOGGER = LogManager.getLogger();
    private static final Map<Identifier, Supplier<?>> DEFAULT_ENTRIES = Maps.newLinkedHashMap();
    public static final MutableRegistry<MutableRegistry<?>> REGISTRIES = new SimpleRegistry<>();
-   public static final Registry<SoundEvent> SOUND_EVENT = create("sound_event", () -> {
+   @Deprecated public static final Registry<SoundEvent> SOUND_EVENT = forge("sound_event", SoundEvent.class, () -> {
       return SoundEvents.ENTITY_ITEM_PICKUP;
    });
-   public static final DefaultedRegistry<Fluid> FLUID = create("fluid", "empty", () -> {
+   @Deprecated public static final DefaultedRegistry<Fluid> FLUID = forgeDefaulted("fluid", Fluid.class, () -> {
       return Fluids.EMPTY;
    });
-   public static final Registry<StatusEffect> STATUS_EFFECT = create("mob_effect", () -> {
+   @Deprecated public static final Registry<StatusEffect> STATUS_EFFECT = forge("mob_effect", StatusEffect.class, () -> {
       return StatusEffects.LUCK;
    });
-   public static final DefaultedRegistry<Block> BLOCK = create("block", "air", () -> {
+   @Deprecated public static final DefaultedRegistry<Block> BLOCK = forgeDefaulted("block", Block.class, () -> {
       return Blocks.AIR;
    });
-   public static final Registry<Enchantment> ENCHANTMENT = create("enchantment", () -> {
+   @Deprecated public static final Registry<Enchantment> ENCHANTMENT = forge("enchantment", Enchantment.class, () -> {
       return Enchantments.FORTUNE;
    });
-   public static final DefaultedRegistry<EntityType<?>> ENTITY_TYPE = create("entity_type", "pig", () -> {
+   @Deprecated public static final DefaultedRegistry<EntityType<?>> ENTITY_TYPE = forgeDefaulted("entity_type", EntityType.class, () -> {
       return EntityType.PIG;
    });
-   public static final DefaultedRegistry<Item> ITEM = create("item", "air", () -> {
+   @Deprecated public static final DefaultedRegistry<Item> ITEM = forgeDefaulted("item", Item.class, () -> {
       return Items.AIR;
    });
-   public static final DefaultedRegistry<Potion> POTION = create("potion", "empty", () -> {
+   @Deprecated public static final DefaultedRegistry<Potion> POTION = forgeDefaulted("potion", Potion.class, () -> {
       return Potions.EMPTY;
    });
-   public static final Registry<Carver<?>> CARVER = create("carver", () -> {
+   @Deprecated public static final Registry<Carver<?>> CARVER = forge("carver", Carver.class, () -> {
       return Carver.CAVE;
    });
-   public static final Registry<SurfaceBuilder<?>> SURFACE_BUILDER = create("surface_builder", () -> {
+   @Deprecated public static final Registry<SurfaceBuilder<?>> SURFACE_BUILDER = forge("surface_builder", SurfaceBuilder.class, () -> {
       return SurfaceBuilder.DEFAULT;
    });
-   public static final Registry<Feature<?>> FEATURE = create("feature", () -> {
+   @Deprecated public static final Registry<Feature<?>> FEATURE = forge("feature", Feature.class, () -> {
       return Feature.ORE;
    });
-   public static final Registry<Decorator<?>> DECORATOR = create("decorator", () -> {
+   @Deprecated public static final Registry<Decorator<?>> DECORATOR = forge("decorator", Decorator.class, () -> {
       return Decorator.NOPE;
    });
-   public static final Registry<Biome> BIOME = create("biome", () -> {
+   @Deprecated public static final Registry<Biome> BIOME = forge("biome", Biome.class, () -> {
       return Biomes.DEFAULT;
    });
    public static final Registry<BlockStateProviderType<?>> BLOCK_STATE_PROVIDER_TYPE = create("block_state_provider_type", () -> {
@@ -127,33 +130,31 @@
    public static final Registry<TreeDecoratorType<?>> TREE_DECORATOR_TYPE = create("tree_decorator_type", () -> {
       return TreeDecoratorType.LEAVE_VINE;
    });
-   public static final Registry<ParticleType<? extends ParticleEffect>> PARTICLE_TYPE = create("particle_type", () -> {
+   @Deprecated public static final Registry<ParticleType<? extends ParticleEffect>> PARTICLE_TYPE = forge("particle_type", ParticleType.class, () -> {
       return ParticleTypes.BLOCK;
    });
-   public static final Registry<BiomeSourceType<?, ?>> BIOME_SOURCE_TYPE = create("biome_source_type", () -> {
+   @Deprecated public static final Registry<BiomeSourceType<?, ?>> BIOME_SOURCE_TYPE = forge("biome_source_type", BiomeSourceType.class, () -> {
       return BiomeSourceType.VANILLA_LAYERED;
    });
-   public static final Registry<BlockEntityType<?>> BLOCK_ENTITY_TYPE = create("block_entity_type", () -> {
+   @Deprecated public static final Registry<BlockEntityType<?>> BLOCK_ENTITY_TYPE = forge("block_entity_type", BlockEntityType.class, () -> {
       return BlockEntityType.FURNACE;
    });
-   public static final Registry<ChunkGeneratorType<?, ?>> CHUNK_GENERATOR_TYPE = create("chunk_generator_type", () -> {
+   @Deprecated public static final Registry<ChunkGeneratorType<?, ?>> CHUNK_GENERATOR_TYPE = forge("chunk_generator_type", ChunkGeneratorType.class, () -> {
       return ChunkGeneratorType.FLAT;
    });
-   public static final Registry<DimensionType> DIMENSION_TYPE = create("dimension_type", () -> {
+   @Deprecated public static final Registry<DimensionType> DIMENSION_TYPE = putDefaultEntry("dimension_type", net.minecraftforge.common.DimensionManager.getRegistry(), () -> {
       return DimensionType.OVERWORLD;
    });
-   public static final DefaultedRegistry<PaintingMotive> PAINTING_MOTIVE = create("motive", "kebab", () -> {
+   @Deprecated public static final DefaultedRegistry<PaintingMotive> PAINTING_MOTIVE = forgeDefaulted("motive", PaintingMotive.class, () -> {
       return PaintingMotive.KEBAB;
    });
    public static final Registry<Identifier> CUSTOM_STAT = create("custom_stat", () -> {
       return Stats.JUMP;
    });
-   public static final DefaultedRegistry<ChunkStatus> CHUNK_STATUS = create("chunk_status", "empty", () -> {
+   @Deprecated public static final DefaultedRegistry<ChunkStatus> CHUNK_STATUS = forgeDefaulted("chunk_status", ChunkStatus.class, () -> {
       return ChunkStatus.EMPTY;
    });
-   public static final Registry<StructureFeature<?>> STRUCTURE_FEATURE = create("structure_feature", () -> {
-      return StructureFeatures.MINESHAFT;
-   });
+   @Deprecated public static final Registry<StructureFeature<?>> STRUCTURE_FEATURE = net.minecraftforge.registries.GameData.getStructureFeatures();
    public static final Registry<StructurePieceType> STRUCTURE_PIECE = create("structure_piece", () -> {
       return StructurePieceType.MINESHAFT_ROOM;
    });
@@ -166,37 +167,37 @@
    public static final Registry<StructurePoolElementType> STRUCTURE_POOL_ELEMENT = create("structure_pool_element", () -> {
       return StructurePoolElementType.EMPTY_POOL_ELEMENT;
    });
-   public static final Registry<ContainerType<?>> CONTAINER = create("menu", () -> {
+   @Deprecated public static final Registry<ContainerType<?>> CONTAINER = forge("menu", ContainerType.class, () -> {
       return ContainerType.ANVIL;
    });
    public static final Registry<RecipeType<?>> RECIPE_TYPE = create("recipe_type", () -> {
       return RecipeType.CRAFTING;
    });
-   public static final Registry<RecipeSerializer<?>> RECIPE_SERIALIZER = create("recipe_serializer", () -> {
+   @Deprecated public static final Registry<RecipeSerializer<?>> RECIPE_SERIALIZER = forge("recipe_serializer", RecipeSerializer.class, () -> {
       return RecipeSerializer.SHAPELESS;
    });
-   public static final Registry<StatType<?>> STAT_TYPE = create("stat_type", () -> {
+   @Deprecated public static final Registry<StatType<?>> STAT_TYPE = forge("stat_type", StatType.class, () -> {
       return Stats.USED;
    });
    public static final DefaultedRegistry<VillagerType> VILLAGER_TYPE = create("villager_type", "plains", () -> {
       return VillagerType.PLAINS;
    });
-   public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = create("villager_profession", "none", () -> {
+   @Deprecated public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = forgeDefaulted("villager_profession", VillagerProfession.class, () -> {
       return VillagerProfession.NONE;
    });
-   public static final DefaultedRegistry<PointOfInterestType> POINT_OF_INTEREST_TYPE = create("point_of_interest_type", "unemployed", () -> {
+   @Deprecated public static final DefaultedRegistry<PointOfInterestType> POINT_OF_INTEREST_TYPE = forgeDefaulted("point_of_interest_type", PointOfInterestType.class, () -> {
       return PointOfInterestType.UNEMPLOYED;
    });
-   public static final DefaultedRegistry<MemoryModuleType<?>> MEMORY_MODULE_TYPE = create("memory_module_type", "dummy", () -> {
+   @Deprecated public static final DefaultedRegistry<MemoryModuleType<?>> MEMORY_MODULE_TYPE = forgeDefaulted("memory_module_type", MemoryModuleType.class, () -> {
       return MemoryModuleType.DUMMY;
    });
-   public static final DefaultedRegistry<SensorType<?>> SENSOR_TYPE = create("sensor_type", "dummy", () -> {
+   @Deprecated public static final DefaultedRegistry<SensorType<?>> SENSOR_TYPE = forgeDefaulted("sensor_type", SensorType.class, () -> {
       return SensorType.DUMMY;
    });
-   public static final Registry<Schedule> SCHEDULE = create("schedule", () -> {
+   @Deprecated public static final Registry<Schedule> SCHEDULE = forge("schedule", Schedule.class, () -> {
       return Schedule.EMPTY;
    });
-   public static final Registry<Activity> ACTIVITY = create("activity", () -> {
+   @Deprecated public static final Registry<Activity> ACTIVITY = forge("activity", Activity.class, () -> {
       return Activity.IDLE;
    });
 
@@ -248,6 +249,14 @@
       return ((MutableRegistry<T>)p_218343_0_).set(p_218343_1_, new Identifier(p_218343_2_), p_218343_3_);
    }
 
+   private static <T extends net.minecraftforge.registries.IForgeRegistryEntry<T>> Registry<T> forge(String name, Class<? super T> cls, Supplier<T> def) {
+      return putDefaultEntry(name, net.minecraftforge.registries.GameData.<T>getWrapper(cls), def);
+   }
+
+   private static <T extends net.minecraftforge.registries.IForgeRegistryEntry<T>> DefaultedRegistry<T> forgeDefaulted(String name, Class<? super T> cls, Supplier<T> def) {
+      return Registry.<T, DefaultedRegistry<T>>putDefaultEntry(name, net.minecraftforge.registries.GameData.<T>getWrapperDefaulted(cls), def);
+   }
+
    static {
       DEFAULT_ENTRIES.entrySet().forEach((p_229397_0_) -> {
          if (p_229397_0_.getValue().get() == null) {
