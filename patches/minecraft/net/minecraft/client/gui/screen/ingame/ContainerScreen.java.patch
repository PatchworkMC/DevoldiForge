--- a/net/minecraft/client/gui/screen/ingame/ContainerScreen.java
+++ b/net/minecraft/client/gui/screen/ingame/ContainerScreen.java
@@ -72,6 +72,7 @@
       int i = this.x;
       int j = this.y;
       this.drawBackground(p_render_3_, p_render_1_, p_render_2_);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiContainerEvent.DrawBackground(this, p_render_1_, p_render_2_));
       RenderSystem.disableRescaleNormal();
       RenderSystem.disableDepthTest();
       super.render(p_render_1_, p_render_2_, p_render_3_);
@@ -97,13 +98,15 @@
             int j1 = slot.xPosition;
             int k1 = slot.yPosition;
             RenderSystem.colorMask(true, true, true, false);
-            this.fillGradient(j1, k1, j1 + 16, k1 + 16, -2130706433, -2130706433);
+            int slotColor = this.getSlotColor(i1);
+            this.fillGradient(j1, k1, j1 + 16, k1 + 16, slotColor, slotColor);
             RenderSystem.colorMask(true, true, true, true);
             RenderSystem.enableDepthTest();
          }
       }
 
       this.drawForeground(p_render_1_, p_render_2_);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.GuiContainerEvent.DrawForeground(this, p_render_1_, p_render_2_));
       PlayerInventory playerinventory = this.minecraft.player.inventory;
       ItemStack itemstack = this.touchDragStack.isEmpty() ? playerinventory.getCursorStack() : this.touchDragStack;
       if (!itemstack.isEmpty()) {
@@ -153,8 +156,10 @@
       RenderSystem.translatef(0.0F, 0.0F, 32.0F);
       this.setBlitOffset(200);
       this.itemRenderer.zOffset = 200.0F;
+      net.minecraft.client.font.TextRenderer font = stack.getItem().getFontRenderer(stack);
+      if (font == null) font = this.font;
       this.itemRenderer.renderGuiItem(stack, x, y);
-      this.itemRenderer.renderGuiItemOverlay(this.font, stack, x, y - (this.touchDragStack.isEmpty() ? 0 : 8), altText);
+      this.itemRenderer.renderGuiItemOverlay(font, stack, x, y - (this.touchDragStack.isEmpty() ? 0 : 8), altText);
       this.setBlitOffset(0);
       this.itemRenderer.zOffset = 0.0F;
    }
@@ -261,7 +266,8 @@
       if (super.mouseClicked(p_mouseClicked_1_, p_mouseClicked_3_, p_mouseClicked_5_)) {
          return true;
       } else {
-         boolean flag = this.minecraft.options.keyPickItem.matchesMouse(p_mouseClicked_5_);
+         InputUtil.KeyCode mouseKey = InputUtil.Type.MOUSE.createFromCode(p_mouseClicked_5_);
+         boolean flag = this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey);
          Slot slot = this.getSlotAt(p_mouseClicked_1_, p_mouseClicked_3_);
          long i = Util.getMeasuringTimeMs();
          this.isDoubleClicking = this.lastClickedSlot == slot && i - this.lastButtonClickTime < 250L && this.lastClickedButton == p_mouseClicked_5_;
@@ -270,6 +276,7 @@
             int j = this.x;
             int k = this.y;
             boolean flag1 = this.isClickOutsideBounds(p_mouseClicked_1_, p_mouseClicked_3_, j, k, p_mouseClicked_5_);
+            if (slot != null) flag1 = false; // Forge, prevent dropping of items through slots outside of GUI boundaries
             int l = -1;
             if (slot != null) {
                l = slot.id;
@@ -295,7 +302,7 @@
                   }
                } else if (!this.isCursorDragging) {
                   if (this.minecraft.player.inventory.getCursorStack().isEmpty()) {
-                     if (this.minecraft.options.keyPickItem.matchesMouse(p_mouseClicked_5_)) {
+                     if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                         this.onMouseClick(slot, l, p_mouseClicked_5_, SlotActionType.CLONE);
                      } else {
                         boolean flag2 = l != -999 && (InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), 340) || InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), 344));
@@ -319,7 +326,7 @@
                         this.heldButtonType = 0;
                      } else if (p_mouseClicked_5_ == 1) {
                         this.heldButtonType = 1;
-                     } else if (this.minecraft.options.keyPickItem.matchesMouse(p_mouseClicked_5_)) {
+                     } else if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                         this.heldButtonType = 2;
                      }
                   }
@@ -372,10 +379,13 @@
    }
 
    public boolean mouseReleased(double p_mouseReleased_1_, double p_mouseReleased_3_, int p_mouseReleased_5_) {
+      super.mouseReleased(p_mouseReleased_1_, p_mouseReleased_3_, p_mouseReleased_5_); //Forge, Call parent to release buttons
       Slot slot = this.getSlotAt(p_mouseReleased_1_, p_mouseReleased_3_);
       int i = this.x;
       int j = this.y;
       boolean flag = this.isClickOutsideBounds(p_mouseReleased_1_, p_mouseReleased_3_, i, j, p_mouseReleased_5_);
+      if (slot != null) flag = false; // Forge, prevent dropping of items through slots outside of GUI boundaries
+      InputUtil.KeyCode mouseKey = InputUtil.Type.MOUSE.createFromCode(p_mouseReleased_5_);
       int k = -1;
       if (slot != null) {
          k = slot.id;
@@ -389,7 +399,7 @@
          if (hasShiftDown()) {
             if (!this.quickMovingStack.isEmpty()) {
                for(Slot slot2 : this.container.slots) {
-                  if (slot2 != null && slot2.canTakeItems(this.minecraft.player) && slot2.hasStack() && slot2.inventory == slot.inventory && Container.canInsertItemIntoSlot(slot2, this.quickMovingStack, true)) {
+                  if (slot2 != null && slot2.canTakeItems(this.minecraft.player) && slot2.hasStack() && slot2.isSameInventory(slot) && Container.canInsertItemIntoSlot(slot2, this.quickMovingStack, true)) {
                      this.onMouseClick(slot2, slot2.id, p_mouseReleased_5_, SlotActionType.QUICK_MOVE);
                   }
                }
@@ -453,7 +463,7 @@
 
             this.onMouseClick((Slot)null, -999, Container.packClickData(2, this.heldButtonType), SlotActionType.QUICK_CRAFT);
          } else if (!this.minecraft.player.inventory.getCursorStack().isEmpty()) {
-            if (this.minecraft.options.keyPickItem.matchesMouse(p_mouseReleased_5_)) {
+            if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                this.onMouseClick(slot, k, p_mouseReleased_5_, SlotActionType.CLONE);
             } else {
                boolean flag1 = k != -999 && (InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), 340) || InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), 344));
@@ -502,27 +512,34 @@
       if (super.keyPressed(p_keyPressed_1_, p_keyPressed_2_, p_keyPressed_3_)) {
          return true;
       } else {
-         if (p_keyPressed_1_ == 256 || this.minecraft.options.keyInventory.matchesKey(p_keyPressed_1_, p_keyPressed_2_)) {
+         InputUtil.KeyCode mouseKey = InputUtil.getKeyCode(p_keyPressed_1_, p_keyPressed_2_);
+         if (p_keyPressed_1_ == 256 || this.minecraft.options.keyInventory.isActiveAndMatches(mouseKey)) {
             this.minecraft.player.closeContainer();
+            return true; // Forge MC-146650: Needs to return true when the key is handled.
          }
 
-         this.handleHotbarKeyPressed(p_keyPressed_1_, p_keyPressed_2_);
+         if (this.handleHotbarKeyPressed(p_keyPressed_1_, p_keyPressed_2_))
+            return true; // Forge MC-146650: Needs to return true when the key is handled.
          if (this.focusedSlot != null && this.focusedSlot.hasStack()) {
-            if (this.minecraft.options.keyPickItem.matchesKey(p_keyPressed_1_, p_keyPressed_2_)) {
+            if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                this.onMouseClick(this.focusedSlot, this.focusedSlot.id, 0, SlotActionType.CLONE);
-            } else if (this.minecraft.options.keyDrop.matchesKey(p_keyPressed_1_, p_keyPressed_2_)) {
+               return true; // Forge MC-146650: Needs to return true when the key is handled.
+            } else if (this.minecraft.options.keyDrop.isActiveAndMatches(mouseKey)) {
                this.onMouseClick(this.focusedSlot, this.focusedSlot.id, hasControlDown() ? 1 : 0, SlotActionType.THROW);
+               return true; // Forge MC-146650: Needs to return true when the key is handled.
             }
+         } else if (this.minecraft.options.keyDrop.isActiveAndMatches(mouseKey)) {
+            return true; // Forge MC-146650: Emulate MC bug, so we don't drop from hotbar when pressing drop without hovering over a item.
          }
 
-         return true;
+         return false; // Forge MC-146650: Needs to return false when the key is not handled.
       }
    }
 
    protected boolean handleHotbarKeyPressed(int keyCode, int scanCode) {
       if (this.minecraft.player.inventory.getCursorStack().isEmpty() && this.focusedSlot != null) {
          for(int i = 0; i < 9; ++i) {
-            if (this.minecraft.options.keysHotbar[i].matchesKey(keyCode, scanCode)) {
+            if (this.minecraft.options.keysHotbar[i].isActiveAndMatches(InputUtil.getKeyCode(keyCode, scanCode))) {
                this.onMouseClick(this.focusedSlot, this.focusedSlot.id, i, SlotActionType.SWAP);
                return true;
             }
@@ -553,4 +570,16 @@
    public T getContainer() {
       return this.container;
    }
+
+   @javax.annotation.Nullable
+   public Slot getSlotUnderMouse() { return this.focusedSlot; }
+   public int getGuiLeft() { return x; }
+   public int getGuiTop() { return y; }
+   public int getXSize() { return containerWidth; }
+   public int getYSize() { return containerHeight; }
+
+   protected int slotColor = -2130706433;
+   public int getSlotColor(int index) {
+      return slotColor;
+   }
 }
