--- a/net/minecraft/client/options/KeyBinding.java
+++ b/net/minecraft/client/options/KeyBinding.java
@@ -16,9 +16,9 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 
 @Environment(EnvType.CLIENT)
-public class KeyBinding implements Comparable<KeyBinding> {
+public class KeyBinding implements Comparable<KeyBinding>, net.minecraftforge.client.extensions.IForgeKeybinding {
    private static final Map<String, KeyBinding> keysById = Maps.newHashMap();
-   private static final Map<InputUtil.KeyCode, KeyBinding> keysByCode = Maps.newHashMap();
+   private static final net.minecraftforge.client.settings.KeyBindingMap keysByCode = new net.minecraftforge.client.settings.KeyBindingMap();
    private static final Set<String> keyCategories = Sets.newHashSet();
    private static final Map<String, Integer> categoryOrderMap = Util.make(Maps.newHashMap(), (p_205215_0_) -> {
       p_205215_0_.put("key.categories.movement", 1);
@@ -37,7 +37,7 @@
    private int timesPressed;
 
    public static void onKeyPressed(InputUtil.KeyCode key) {
-      KeyBinding keybinding = keysByCode.get(key);
+      KeyBinding keybinding = keysByCode.lookupActive(key);
       if (keybinding != null) {
          ++keybinding.timesPressed;
       }
@@ -45,7 +45,7 @@
    }
 
    public static void setKeyPressed(InputUtil.KeyCode key, boolean held) {
-      KeyBinding keybinding = keysByCode.get(key);
+      for (KeyBinding keybinding : keysByCode.lookupAll(key))
       if (keybinding != null) {
          keybinding.setPressed(held);
       }
@@ -69,10 +69,10 @@
    }
 
    public static void updateKeysByCode() {
-      keysByCode.clear();
+      keysByCode.clearMap();
 
       for(KeyBinding keybinding : keysById.values()) {
-         keysByCode.put(keybinding.keyCode, keybinding);
+         keysByCode.addKey(keybinding.keyCode, keybinding);
       }
 
    }
@@ -87,12 +87,12 @@
       this.defaultKeyCode = this.keyCode;
       this.category = category;
       keysById.put(description, this);
-      keysByCode.put(this.keyCode, this);
+      keysByCode.addKey(this.keyCode, this);
       keyCategories.add(category);
    }
 
    public boolean isPressed() {
-      return this.pressed;
+      return this.pressed && getKeyConflictContext().isActive() && getKeyModifier().isActive(getKeyConflictContext());
    }
 
    public String getCategory() {
@@ -126,7 +126,13 @@
    }
 
    public int compareTo(KeyBinding p_compareTo_1_) {
-      return this.category.equals(p_compareTo_1_.category) ? I18n.translate(this.id).compareTo(I18n.translate(p_compareTo_1_.id)) : categoryOrderMap.get(this.category).compareTo(categoryOrderMap.get(p_compareTo_1_.category));
+      if (this.category.equals(p_compareTo_1_.category)) return I18n.translate(this.id).compareTo(I18n.translate(p_compareTo_1_.id));
+      Integer tCat = categoryOrderMap.get(this.category);
+      Integer oCat = categoryOrderMap.get(p_compareTo_1_.category);
+      if (tCat == null && oCat != null) return 1;
+      if (tCat != null && oCat == null) return -1;
+      if (tCat == null && oCat == null) return I18n.translate(this.category).compareTo(I18n.translate(p_compareTo_1_.category));
+      return  tCat.compareTo(oCat);
    }
 
    public static Supplier<String> getLocalizedName(String key) {
@@ -137,6 +143,20 @@
    }
 
    public boolean equals(KeyBinding binding) {
+      if (getKeyConflictContext().conflicts(binding.getKeyConflictContext()) || binding.getKeyConflictContext().conflicts(getKeyConflictContext())) {
+         net.minecraftforge.client.settings.KeyModifier keyModifier = getKeyModifier();
+         net.minecraftforge.client.settings.KeyModifier otherKeyModifier = binding.getKeyModifier();
+         if (keyModifier.matches(binding.getKey()) || otherKeyModifier.matches(getKey())) {
+            return true;
+         } else if (getKey().equals(binding.getKey())) {
+            // IN_GAME key contexts have a conflict when at least one modifier is NONE.
+            // For example: If you hold shift to crouch, you can still press E to open your inventory. This means that a Shift+E hotkey is in conflict with E.
+            // GUI and other key contexts do not have this limitation.
+            return keyModifier == otherKeyModifier ||
+               (getKeyConflictContext().conflicts(net.minecraftforge.client.settings.KeyConflictContext.IN_GAME) &&
+               (keyModifier == net.minecraftforge.client.settings.KeyModifier.NONE || otherKeyModifier == net.minecraftforge.client.settings.KeyModifier.NONE));
+         }
+      }
       return this.keyCode.equals(binding.keyCode);
    }
 
@@ -157,6 +177,7 @@
    }
 
    public String getLocalizedName() {
+      return getKeyModifier().getLocalizedComboName(this.keyCode, () -> {
       String s = this.keyCode.getName();
       int i = this.keyCode.getKeyCode();
       String s1 = null;
@@ -173,16 +194,97 @@
       }
 
       return s1 == null ? I18n.translate(s) : s1;
+      });
    }
 
    public boolean isDefault() {
-      return this.keyCode.equals(this.defaultKeyCode);
+      return this.keyCode.equals(this.defaultKeyCode) && getKeyModifier() == getKeyModifierDefault();
    }
 
    public String getName() {
       return this.keyCode.getName();
    }
 
+   /****************** Forge Start *****************************/
+   private net.minecraftforge.client.settings.KeyModifier keyModifierDefault = net.minecraftforge.client.settings.KeyModifier.NONE;
+   private net.minecraftforge.client.settings.KeyModifier keyModifier = net.minecraftforge.client.settings.KeyModifier.NONE;
+   private net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext = net.minecraftforge.client.settings.KeyConflictContext.UNIVERSAL;
+
+   /**
+    * Convenience constructor for creating KeyBindings with keyConflictContext set.
+    */
+   public KeyBinding(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, final InputUtil.Type inputType, final int keyCode, String category) {
+      this(description, keyConflictContext, inputType.createFromCode(keyCode), category);
+   }
+
+   /**
+    * Convenience constructor for creating KeyBindings with keyConflictContext set.
+    */
+   public KeyBinding(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, InputUtil.KeyCode keyCode, String category) {
+      this(description, keyConflictContext, net.minecraftforge.client.settings.KeyModifier.NONE, keyCode, category);
+   }
+
+   /**
+    * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set.
+    */
+   public KeyBinding(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, net.minecraftforge.client.settings.KeyModifier keyModifier, final InputUtil.Type inputType, final int keyCode, String category) {
+      this(description, keyConflictContext, keyModifier, inputType.createFromCode(keyCode), category);
+   }
+
+   /**
+    * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set.
+    */
+   public KeyBinding(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, net.minecraftforge.client.settings.KeyModifier keyModifier, InputUtil.KeyCode keyCode, String category) {
+       this.id = description;
+       this.keyCode = keyCode;
+       this.defaultKeyCode = keyCode;
+       this.category = category;
+       this.keyConflictContext = keyConflictContext;
+       this.keyModifier = keyModifier;
+       this.keyModifierDefault = keyModifier;
+       if (this.keyModifier.matches(keyCode))
+          this.keyModifier = net.minecraftforge.client.settings.KeyModifier.NONE;
+       keysById.put(description, this);
+       keysByCode.addKey(keyCode, this);
+       keyCategories.add(category);
+   }
+
+   @Override
+   public InputUtil.KeyCode getKey() {
+      return this.keyCode;
+   }
+
+   @Override
+   public void setKeyConflictContext(net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext) {
+      this.keyConflictContext = keyConflictContext;
+   }
+
+   @Override
+   public net.minecraftforge.client.settings.IKeyConflictContext getKeyConflictContext() {
+      return keyConflictContext;
+   }
+
+   @Override
+   public net.minecraftforge.client.settings.KeyModifier getKeyModifierDefault() {
+      return keyModifierDefault;
+   }
+
+   @Override
+   public net.minecraftforge.client.settings.KeyModifier getKeyModifier() {
+      return keyModifier;
+   }
+
+   @Override
+   public void setKeyModifierAndCode(net.minecraftforge.client.settings.KeyModifier keyModifier, InputUtil.KeyCode keyCode) {
+      this.keyCode = keyCode;
+      if (keyModifier.matches(keyCode))
+         keyModifier = net.minecraftforge.client.settings.KeyModifier.NONE;
+      keysByCode.removeKey(this);
+      this.keyModifier = keyModifier;
+      keysByCode.addKey(keyCode, this);
+   }
+   /****************** Forge End *****************************/
+
    public void setPressed(boolean valueIn) {
       this.pressed = valueIn;
    }
