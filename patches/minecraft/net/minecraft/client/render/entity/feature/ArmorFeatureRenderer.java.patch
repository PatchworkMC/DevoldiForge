--- a/net/minecraft/client/render/entity/feature/ArmorFeatureRenderer.java
+++ b/net/minecraft/client/render/entity/feature/ArmorFeatureRenderer.java
@@ -46,21 +46,22 @@
          ArmorItem armoritem = (ArmorItem)itemstack.getItem();
          if (armoritem.getSlotType() == slotIn) {
             A a = this.getArmor(slotIn);
+            a = getArmorModelHook(entityLivingBaseIn, itemstack, slotIn, a);
             ((BipedEntityModel)this.getContextModel()).setAttributes(a);
             a.animateModel(entityLivingBaseIn, limbSwing, limbSwingAmount, partialTicks);
             this.setVisible(a, slotIn);
             a.setAngles(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch);
             boolean flag = this.isLegs(slotIn);
             boolean flag1 = itemstack.hasEnchantmentGlint();
-            if (armoritem instanceof DyeableArmorItem) {
-               int i = ((DyeableArmorItem)armoritem).getColor(itemstack);
+            if (armoritem instanceof net.minecraft.item.DyeableItem) { // Allow this for anything, not only cloth
+               int i = ((net.minecraft.item.DyeableItem)armoritem).getColor(itemstack);
                float f = (float)(i >> 16 & 255) / 255.0F;
                float f1 = (float)(i >> 8 & 255) / 255.0F;
                float f2 = (float)(i & 255) / 255.0F;
-               this.renderArmorParts(matrixStackIn, bufferIn, packedLightIn, armoritem, flag1, a, flag, f, f1, f2, (String)null);
-               this.renderArmorParts(matrixStackIn, bufferIn, packedLightIn, armoritem, flag1, a, flag, 1.0F, 1.0F, 1.0F, "overlay");
+               renderArmor(matrixStackIn, bufferIn, packedLightIn, flag1, a, f, f1, f2, this.getArmorResource(entityLivingBaseIn, itemstack, slotIn, null));
+               renderArmor(matrixStackIn, bufferIn, packedLightIn, flag1, a, 1.0F, 1.0F, 1.0F, this.getArmorResource(entityLivingBaseIn, itemstack, slotIn, "overlay"));
             } else {
-               this.renderArmorParts(matrixStackIn, bufferIn, packedLightIn, armoritem, flag1, a, flag, 1.0F, 1.0F, 1.0F, (String)null);
+               renderArmor(matrixStackIn, bufferIn, packedLightIn, flag1, a, 1.0F, 1.0F, 1.0F, this.getArmorResource(entityLivingBaseIn, itemstack, slotIn, null));
             }
 
          }
@@ -68,7 +69,10 @@
    }
 
    private void renderArmorParts(MatrixStack matrixStackIn, VertexConsumerProvider bufferIn, int packedLightIn, ArmorItem armorItemIn, boolean glintIn, A modelIn, boolean legSlotIn, float red, float green, float blue, @Nullable String overlayIn) {
-      VertexConsumer ivertexbuilder = ItemRenderer.getArmorVertexConsumer(bufferIn, RenderLayer.getEntityCutoutNoCull(this.getArmorTexture(armorItemIn, legSlotIn, overlayIn)), false, glintIn);
+      renderArmor(matrixStackIn, bufferIn, packedLightIn, glintIn, modelIn, red, green, blue, this.getArmorTexture(armorItemIn, legSlotIn, overlayIn));
+   }
+   private void renderArmor(MatrixStack matrixStackIn, VertexConsumerProvider bufferIn, int packedLightIn, boolean glintIn, A modelIn, float red, float green, float blue, Identifier armorResource) {
+      VertexConsumer ivertexbuilder = ItemRenderer.getArmorVertexConsumer(bufferIn, RenderLayer.getEntityCutoutNoCull(armorResource), false, glintIn);
       modelIn.render(matrixStackIn, ivertexbuilder, packedLightIn, OverlayTexture.DEFAULT_UV, red, green, blue, 1.0F);
    }
 
@@ -80,6 +84,7 @@
       return slotIn == EquipmentSlot.LEGS;
    }
 
+   @Deprecated //Use the more sensitive version getArmorResource below
    private Identifier getArmorTexture(ArmorItem armor, boolean legSlotIn, @Nullable String suffixOverlayIn) {
       String s = "textures/models/armor/" + armor.getMaterial().getName() + "_layer_" + (legSlotIn ? 2 : 1) + (suffixOverlayIn == null ? "" : "_" + suffixOverlayIn) + ".png";
       return ARMOR_TEXTURE_CACHE.computeIfAbsent(s, Identifier::new);
@@ -88,4 +93,48 @@
    protected abstract void setVisible(A modelIn, EquipmentSlot slotIn);
 
    protected abstract void setInvisible(A model);
+
+
+   /*=================================== FORGE START =========================================*/
+
+   /**
+    * Hook to allow item-sensitive armor model. for LayerBipedArmor.
+    */
+   protected A getArmorModelHook(T entity, ItemStack itemStack, EquipmentSlot slot, A model) {
+      return model;
+   }
+
+   /**
+    * More generic ForgeHook version of the above function, it allows for Items to have more control over what texture they provide.
+    *
+    * @param entity Entity wearing the armor
+    * @param stack ItemStack for the armor
+    * @param slot Slot ID that the item is in
+    * @param type Subtype, can be null or "overlay"
+    * @return ResourceLocation pointing at the armor's texture
+    */
+   public Identifier getArmorResource(net.minecraft.entity.Entity entity, ItemStack stack, EquipmentSlot slot, @javax.annotation.Nullable String type) {
+      ArmorItem item = (ArmorItem)stack.getItem();
+      String texture = item.getMaterial().getName();
+      String domain = "minecraft";
+      int idx = texture.indexOf(':');
+      if (idx != -1)
+      {
+         domain = texture.substring(0, idx);
+         texture = texture.substring(idx + 1);
+      }
+      String s1 = String.format("%s:textures/models/armor/%s_layer_%d%s.png", domain, texture, (isLegs(slot) ? 2 : 1), type == null ? "" : String.format("_%s", type));
+
+      s1 = net.minecraftforge.client.ForgeHooksClient.getArmorTexture(entity, stack, s1, slot, type);
+      Identifier resourcelocation = ARMOR_TEXTURE_CACHE.get(s1);
+
+      if (resourcelocation == null)
+      {
+         resourcelocation = new Identifier(s1);
+         ARMOR_TEXTURE_CACHE.put(s1, resourcelocation);
+      }
+
+      return resourcelocation;
+   }
+   /*=================================== FORGE END ===========================================*/
 }
