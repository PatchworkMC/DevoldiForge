--- a/net/minecraft/client/particle/ParticleManager.java
+++ b/net/minecraft/client/particle/ParticleManager.java
@@ -67,7 +67,7 @@
    private final Queue<EmitterParticle> newEmitterParticles = Queues.newArrayDeque();
    private final TextureManager textureManager;
    private final Random random = new Random();
-   private final Int2ObjectMap<ParticleFactory<?>> factories = new Int2ObjectOpenHashMap<>();
+   private final Map<Identifier, ParticleFactory<?>> factories = new java.util.HashMap<>();
    private final Queue<Particle> newParticles = Queues.newArrayDeque();
    private final Map<Identifier, ParticleManager.SimpleSpriteProvider> spriteAwareFactories = Maps.newHashMap();
    private final SpriteAtlasTexture particleAtlasTexture = new SpriteAtlasTexture(SpriteAtlasTexture.PARTICLE_ATLAS_TEX);
@@ -145,13 +145,13 @@
    }
 
    public <T extends ParticleEffect> void registerFactory(ParticleType<T> particleTypeIn, ParticleFactory<T> particleFactoryIn) {
-      this.factories.put(Registry.PARTICLE_TYPE.getRawId(particleTypeIn), particleFactoryIn);
+      this.factories.put(Registry.PARTICLE_TYPE.getId(particleTypeIn), particleFactoryIn);
    }
 
    public <T extends ParticleEffect> void registerFactory(ParticleType<T> particleTypeIn, ParticleManager.SpriteAwareFactory<T> particleMetaFactoryIn) {
       ParticleManager.SimpleSpriteProvider particlemanager$animatedspriteimpl = new ParticleManager.SimpleSpriteProvider();
       this.spriteAwareFactories.put(Registry.PARTICLE_TYPE.getId(particleTypeIn), particlemanager$animatedspriteimpl);
-      this.factories.put(Registry.PARTICLE_TYPE.getRawId(particleTypeIn), particleMetaFactoryIn.create(particlemanager$animatedspriteimpl));
+      this.factories.put(Registry.PARTICLE_TYPE.getId(particleTypeIn), particleMetaFactoryIn.create(particlemanager$animatedspriteimpl));
    }
 
    public CompletableFuture<Void> reload(ResourceReloadListener.Synchronizer stage, ResourceManager resourceManager, Profiler preparationsProfiler, Profiler reloadProfiler, Executor backgroundExecutor, Executor gameExecutor) {
@@ -240,11 +240,12 @@
 
    @Nullable
    private <T extends ParticleEffect> Particle createParticle(T particleData, double x, double y, double z, double xSpeed, double ySpeed, double zSpeed) {
-      ParticleFactory<T> iparticlefactory = (ParticleFactory<T>) this.factories.get(Registry.PARTICLE_TYPE.getRawId(particleData.getType()));
+      ParticleFactory<T> iparticlefactory = (ParticleFactory<T>) this.factories.get(Registry.PARTICLE_TYPE.getId(particleData.getType()));
       return iparticlefactory == null ? null : iparticlefactory.createParticle(particleData, this.world, x, y, z, xSpeed, ySpeed, zSpeed);
    }
 
    public void addParticle(Particle effect) {
+      if (effect == null) return; //Forge: Prevent modders from being bad and adding nulls causing untraceable NPEs.
       this.newParticles.add(effect);
    }
 
@@ -307,14 +308,18 @@
 
    public void renderParticles(MatrixStack matrixStackIn, VertexConsumerProvider.Immediate bufferIn, LightmapTextureManager lightTextureIn, Camera activeRenderInfoIn, float partialTicks) {
       lightTextureIn.enable();
+      Runnable enable = () -> {
       RenderSystem.enableAlphaTest();
       RenderSystem.defaultAlphaFunc();
       RenderSystem.enableDepthTest();
       RenderSystem.enableFog();
+      };
       RenderSystem.pushMatrix();
       RenderSystem.multMatrix(matrixStackIn.peek().getModel());
 
-      for(ParticleTextureSheet iparticlerendertype : PARTICLE_TEXTURE_SHEETS) {
+      for(ParticleTextureSheet iparticlerendertype : this.particles.keySet()) { // Forge: allow custom IParticleRenderType's
+         if (iparticlerendertype == ParticleTextureSheet.NO_RENDER) continue;
+         enable.run(); //Forge: MC-168672 Make sure all render types have the correct GL state.
          Iterable<Particle> iterable = this.particles.get(iparticlerendertype);
          if (iterable != null) {
             RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
@@ -353,7 +358,7 @@
    }
 
    public void addBlockBreakParticles(BlockPos pos, BlockState state) {
-      if (!state.isAir()) {
+      if (!state.isAir(this.world, pos) && !state.addDestroyEffects(this.world, pos, this)) {
          VoxelShape voxelshape = state.getOutlineShape(this.world, pos);
          double d0 = 0.25D;
          voxelshape.forEachBox((p_228348_3_, p_228348_5_, p_228348_7_, p_228348_9_, p_228348_11_, p_228348_13_) -> {
@@ -425,6 +430,12 @@
       return String.valueOf(this.particles.values().stream().mapToInt(Collection::size).sum());
    }
 
+   public void addBlockHitEffects(BlockPos pos, net.minecraft.util.hit.BlockHitResult target) {
+      BlockState state = world.getBlockState(pos);
+      if (!state.addHitEffects(world, target, this))
+         addBlockBreakingParticles(pos, target.getSide());
+   }
+
    @Environment(EnvType.CLIENT)
    class SimpleSpriteProvider implements SpriteProvider {
       private List<Sprite> sprites;
