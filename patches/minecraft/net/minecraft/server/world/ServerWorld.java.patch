--- a/net/minecraft/server/world/ServerWorld.java
+++ b/net/minecraft/server/world/ServerWorld.java
@@ -138,7 +138,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class ServerWorld extends World {
+public class ServerWorld extends World implements net.minecraftforge.common.extensions.IForgeWorldServer {
    private static final Logger LOGGER = LogManager.getLogger();
    private final List<Entity> globalEntities = Lists.newArrayList();
    private final Int2ObjectMap<Entity> entitiesById = new Int2ObjectLinkedOpenHashMap<>();
@@ -164,10 +164,13 @@
    private boolean insideTick;
    @Nullable
    private final WanderingTraderManager wanderingTraderManager;
+   /** Stores the recently processed (lighting) chunks */
+   protected java.util.Set<ChunkPos> doneChunks = Sets.newHashSet();
+   private net.minecraftforge.common.util.WorldCapabilityData capabilityData;
 
    public ServerWorld(MinecraftServer serverIn, Executor executorIn, WorldSaveHandler saveHandlerIn, LevelProperties worldInfoIn, DimensionType dimType, Profiler profilerIn, WorldGenerationProgressListener listenerIn) {
       super(worldInfoIn, dimType, (p_217442_4_, p_217442_5_) -> {
-         return new ServerChunkManager((ServerWorld)p_217442_4_, saveHandlerIn.getWorldDir(), saveHandlerIn.getDataFixer(), saveHandlerIn.getStructureManager(), executorIn, p_217442_5_.createChunkGenerator(), serverIn.getPlayerManager().getViewDistance(), listenerIn, () -> {
+         return new ServerChunkManager((ServerWorld)p_217442_4_, saveHandlerIn.getWorldDir(), saveHandlerIn.getDataFixer(), saveHandlerIn.getStructureManager(), executorIn, p_217442_4_.getGeneratorType().createChunkGenerator(p_217442_4_), serverIn.getPlayerManager().getViewDistance(), listenerIn, () -> {
             return serverIn.getWorld(DimensionType.OVERWORLD).getPersistentStateManager();
          });
       }, profilerIn, false);
@@ -185,6 +188,7 @@
       }
 
       this.wanderingTraderManager = this.dimension.getType() == DimensionType.OVERWORLD ? new WanderingTraderManager(this) : null;
+      this.initCapabilities();
    }
 
    public Biome getGeneratorStoredBiome(int x, int y, int z) {
@@ -198,6 +202,7 @@
       this.getWorldBorder().tick();
       iprofiler.swap("weather");
       boolean flag = this.isRaining();
+      this.dimension.updateWeather(() -> {
       if (this.dimension.hasSkyLight()) {
          if (this.getGameRules().getBoolean(GameRules.DO_WEATHER_CYCLE)) {
             int i = this.properties.getClearWeatherTime();
@@ -259,6 +264,7 @@
 
          this.rainGradient = MathHelper.clamp(this.rainGradient, 0.0F, 1.0F);
       }
+      }); //Forge: End weatherTick delegate
 
       if (this.rainGradientPrev != this.rainGradient) {
          this.server.getPlayerManager().sendToDimension(new GameStateChangeS2CPacket(7, this.rainGradient), this.dimension.getType());
@@ -268,15 +274,19 @@
          this.server.getPlayerManager().sendToDimension(new GameStateChangeS2CPacket(8, this.thunderGradient), this.dimension.getType());
       }
 
+      /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+       * rather than to all players on the server. This is what causes the client-side rain, as the
+       * client believes that it has started raining locally, rather than in another dimension.
+       */
       if (flag != this.isRaining()) {
          if (flag) {
-            this.server.getPlayerManager().sendToAll(new GameStateChangeS2CPacket(2, 0.0F));
+            this.server.getPlayerManager().sendToDimension(new GameStateChangeS2CPacket(2, 0.0F), this.dimension.getType());
          } else {
-            this.server.getPlayerManager().sendToAll(new GameStateChangeS2CPacket(1, 0.0F));
+            this.server.getPlayerManager().sendToDimension(new GameStateChangeS2CPacket(1, 0.0F), this.dimension.getType());
          }
 
-         this.server.getPlayerManager().sendToAll(new GameStateChangeS2CPacket(7, this.rainGradient));
-         this.server.getPlayerManager().sendToAll(new GameStateChangeS2CPacket(8, this.thunderGradient));
+         this.server.getPlayerManager().sendToDimension(new GameStateChangeS2CPacket(7, this.rainGradient), this.dimension.getType());
+         this.server.getPlayerManager().sendToDimension(new GameStateChangeS2CPacket(8, this.thunderGradient), this.dimension.getType());
       }
 
       if (this.getLevelProperties().isHardcore() && this.getDifficulty() != Difficulty.HARD) {
@@ -288,8 +298,8 @@
       })) {
          this.allPlayersSleeping = false;
          if (this.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)) {
-            long l = this.properties.getTimeOfDay() + 24000L;
-            this.setTimeOfDay(l - l % 24000L);
+            long l = this.getTimeOfDay() + 24000L;
+            this.setTimeOfDay(net.minecraftforge.event.ForgeEventFactory.onSleepFinished(this, l - l % 24000L, this.getTimeOfDay()));
          }
 
          this.method_23660();
@@ -331,6 +341,7 @@
             Entity entity = this.globalEntities.get(i1);
             this.tickEntity((p_229858_0_) -> {
                ++p_229858_0_.age;
+               if (p_229858_0_.canUpdate())
                p_229858_0_.tick();
             }, entity);
             if (entity.removed) {
@@ -396,7 +407,7 @@
             if (entity2.removed) {
                this.removeEntityFromChunk(entity2);
                objectiterator.remove();
-               this.unloadEntity(entity2);
+               this.removeEntityComplete(entity2, entity2 instanceof ServerPlayerEntity); //Forge: Keep cap data until revive. Every other entity removes directly.
             }
 
             iprofiler.pop();
@@ -419,7 +430,7 @@
       int j = chunkpos.getStartZ();
       Profiler iprofiler = this.getProfiler();
       iprofiler.push("thunder");
-      if (flag && this.isThundering() && this.random.nextInt(100000) == 0) {
+      if (this.dimension.canDoLightning(chunkIn) && flag && this.isThundering() && this.random.nextInt(100000) == 0) {
          BlockPos blockpos = this.method_18210(this.getRandomPosInChunk(i, 0, j, 15));
          if (this.hasRain(blockpos)) {
             LocalDifficulty difficultyinstance = this.getLocalDifficulty(blockpos);
@@ -437,10 +448,11 @@
       }
 
       iprofiler.swap("iceandsnow");
-      if (this.random.nextInt(16) == 0) {
+      if (this.dimension.canDoRainSnowIce(chunkIn) && this.random.nextInt(16) == 0) {
          BlockPos blockpos2 = this.getTopPosition(Heightmap.Type.MOTION_BLOCKING, this.getRandomPosInChunk(i, 0, j, 15));
          BlockPos blockpos3 = blockpos2.down();
          Biome biome = this.getBiome(blockpos2);
+         if (this.isAreaLoaded(blockpos2, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
          if (biome.canSetIce(this, blockpos3)) {
             this.setBlockState(blockpos3, Blocks.ICE.getDefaultState());
          }
@@ -527,10 +539,7 @@
    }
 
    private void resetWeather() {
-      this.properties.setRainTime(0);
-      this.properties.setRaining(false);
-      this.properties.setThunderTime(0);
-      this.properties.setThundering(false);
+      this.dimension.resetRainAndThunder();
    }
 
    @Environment(EnvType.CLIENT)
@@ -543,7 +552,7 @@
       int j = this.properties.getSpawnZ();
       int k = 0;
 
-      while(this.getTopNonAirState(new BlockPos(i, 0, j)).isAir()) {
+      while(this.getTopNonAirState(new BlockPos(i, 0, j)).isAir(this, new BlockPos(i, 0, j))) {
          i += this.random.nextInt(8) - this.random.nextInt(8);
          j += this.random.nextInt(8) - this.random.nextInt(8);
          ++k;
@@ -585,9 +594,10 @@
             ++entityIn.age;
             Profiler iprofiler = this.getProfiler();
             iprofiler.push(() -> {
-               return Registry.ENTITY_TYPE.getId(entityIn.getType()).toString();
+               return entityIn.getType().getRegistryName() == null ? entityIn.getType().toString() : entityIn.getType().getRegistryName().toString();
             });
             iprofiler.visit("tickNonPassenger");
+            if (entityIn.canUpdate())
             entityIn.tick();
             iprofiler.pop();
          }
@@ -653,6 +663,11 @@
    }
 
    public boolean canPlayerModifyAt(PlayerEntity player, BlockPos pos) {
+       return super.canPlayerModifyAt(player, pos);
+   }
+
+   @Override
+   public boolean canMineBlockBody(PlayerEntity player, BlockPos pos) {
       return !this.server.isSpawnProtected(this, pos, player) && this.getWorldBorder().contains(pos);
    }
 
@@ -662,6 +677,7 @@
       } else if (this.properties.getGeneratorType() == LevelGeneratorType.DEBUG_ALL_BLOCK_STATES) {
          this.properties.setSpawnPos(BlockPos.ORIGIN.up());
       } else {
+         if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(this, settings)) return;
          BiomeSource biomeprovider = this.getChunkManager().getChunkGenerator().getBiomeSource();
          List<Biome> list = biomeprovider.getSpawnBiomes();
          Random random = new Random(this.getSeed());
@@ -735,6 +751,7 @@
             progress.method_15414(new TranslatableText("menu.savingChunks"));
          }
 
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Save(this));
          serverchunkprovider.save(flush);
       }
    }
@@ -810,7 +827,7 @@
             }
          }
 
-         EntityCategory entityclassification = entity.getType().getCategory();
+         EntityCategory entityclassification = entity.getClassification(true);
          if (entityclassification != EntityCategory.MISC && this.getChunkManager().method_20727(entity)) {
             object2intmap.mergeInt(entityclassification, 1, Integer::sum);
          }
@@ -852,6 +869,7 @@
    }
 
    private void addPlayer(ServerPlayerEntity player) {
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(player, this))) return;
       Entity entity = this.entitiesByUuid.get(player.getUuid());
       if (entity != null) {
          LOGGER.warn("Force-added player with duplicate UUID {}", (Object)player.getUuid().toString());
@@ -876,6 +894,7 @@
       } else if (this.checkUuid(entityIn)) {
          return false;
       } else {
+         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entityIn, this))) return false;
          Chunk ichunk = this.getChunk(MathHelper.floor(entityIn.getX() / 16.0D), MathHelper.floor(entityIn.getZ() / 16.0D), ChunkStatus.FULL, entityIn.teleporting);
          if (!(ichunk instanceof WorldChunk)) {
             return false;
@@ -891,6 +910,7 @@
       if (this.checkUuid(entityIn)) {
          return false;
       } else {
+         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entityIn, this))) return false;
          this.loadEntityUnchecked(entityIn);
          return true;
       }
@@ -926,12 +946,17 @@
 
    }
 
+   @Deprecated //Forge: Use removeEntityComplete(entity,boolean)
    public void unloadEntity(Entity entityIn) {
+      removeEntityComplete(entityIn, false);
+   }
+   public void removeEntityComplete(Entity entityIn, boolean keepData) {
       if (entityIn instanceof EnderDragonEntity) {
          for(EnderDragonPart enderdragonpartentity : ((EnderDragonEntity)entityIn).getBodyParts()) {
-            enderdragonpartentity.remove();
+            enderdragonpartentity.remove(keepData);
          }
       }
+      entityIn.remove(keepData);
 
       this.entitiesByUuid.remove(entityIn.getUuid());
       this.getChunkManager().unloadEntity(entityIn);
@@ -945,6 +970,7 @@
          this.entityNavigations.remove(((MobEntity)entityIn).getNavigation());
       }
 
+      entityIn.onRemovedFromWorld();
    }
 
    private void loadEntityUnchecked(Entity entityIn) {
@@ -965,15 +991,19 @@
          }
       }
 
+      entityIn.onAddedToWorld();
    }
 
    public void removeEntity(Entity entityIn) {
+      removeEntity(entityIn, false);
+   }
+   public void removeEntity(Entity entityIn, boolean keepData) {
       if (this.ticking) {
          throw (IllegalStateException)Util.throwOrPause(new IllegalStateException("Removing entity while ticking!"));
       } else {
          this.removeEntityFromChunk(entityIn);
          this.entitiesById.remove(entityIn.getEntityId());
-         this.unloadEntity(entityIn);
+         this.removeEntityComplete(entityIn, keepData);
       }
    }
 
@@ -986,8 +1016,11 @@
    }
 
    public void removePlayer(ServerPlayerEntity player) {
-      player.remove();
-      this.removeEntity(player);
+      removePlayer(player, false);
+   }
+   public void removePlayer(ServerPlayerEntity player, boolean keepData) {
+      player.remove(keepData);
+      this.removeEntity(player, keepData);
       this.updatePlayersSleeping();
    }
 
@@ -1011,10 +1044,20 @@
    }
 
    public void playSound(@Nullable PlayerEntity player, double x, double y, double z, SoundEvent soundIn, SoundCategory category, float volume, float pitch) {
+      net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(player, soundIn, category, volume, pitch);
+      if (event.isCanceled() || event.getSound() == null) return;
+      soundIn = event.getSound();
+      category = event.getCategory();
+      volume = event.getVolume();
       this.server.getPlayerManager().sendToAround(player, x, y, z, volume > 1.0F ? (double)(16.0F * volume) : 16.0D, this.dimension.getType(), new PlaySoundS2CPacket(soundIn, category, x, y, z, volume, pitch));
    }
 
    public void playSoundFromEntity(@Nullable PlayerEntity playerIn, Entity entityIn, SoundEvent eventIn, SoundCategory categoryIn, float volume, float pitch) {
+      net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(playerIn, eventIn, categoryIn, volume, pitch);
+      if (event.isCanceled() || event.getSound() == null) return;
+      eventIn = event.getSound();
+      categoryIn = event.getCategory();
+      volume = event.getVolume();
       this.server.getPlayerManager().sendToAround(playerIn, entityIn.getX(), entityIn.getY(), entityIn.getZ(), volume > 1.0F ? (double)(16.0F * volume) : 16.0D, this.dimension.getType(), new PlaySoundFromEntityS2CPacket(eventIn, categoryIn, entityIn, volume, pitch));
    }
 
@@ -1050,6 +1093,7 @@
 
    public Explosion createExplosion(@Nullable Entity entityIn, @Nullable DamageSource damageSourceIn, double xIn, double yIn, double zIn, float explosionRadius, boolean causesFire, Explosion.DestructionType modeIn) {
       Explosion explosion = new Explosion(this, entityIn, xIn, yIn, zIn, explosionRadius, causesFire, modeIn);
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       if (damageSourceIn != null) {
          explosion.setDamageSource(damageSourceIn);
       }
@@ -1378,4 +1422,15 @@
          return boundingBox.contains(p_229855_1_.getPos());
       });
    }
+
+   protected void initCapabilities() {
+      net.minecraftforge.common.capabilities.ICapabilityProvider parent = dimension.initCapabilities();
+      this.gatherCapabilities(parent);
+      capabilityData = this.getPersistentStateManager().getOrCreate(() -> new net.minecraftforge.common.util.WorldCapabilityData(getCapabilities()), net.minecraftforge.common.util.WorldCapabilityData.ID);
+      capabilityData.setCapabilities(dimension, getCapabilities());
+   }
+
+   public java.util.stream.Stream<Entity> getEntities() {
+       return entitiesById.values().stream();
+   }
 }
