--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -191,7 +191,7 @@
    private final GameProfileRepository gameProfileRepo;
    private final UserCache userCache;
    private long lastPlayerSampleUpdate;
-   protected final Thread serverThread = Util.make(new Thread(this, "Server thread"), (p_213187_0_) -> {
+   protected final Thread serverThread = Util.make(new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, this, "Server thread"), (p_213187_0_) -> {
       p_213187_0_.setUncaughtExceptionHandler((p_213206_0_, p_213206_1_) -> {
          LOGGER.error(p_213206_1_);
       });
@@ -216,6 +216,7 @@
    private final LootManager lootManager = new LootManager(this.predicateManager);
    private final ServerAdvancementLoader advancementLoader = new ServerAdvancementLoader();
    private final CommandFunctionManager commandFunctionManager = new CommandFunctionManager(this);
+   private final net.minecraftforge.common.loot.LootModifierManager lootManager = new net.minecraftforge.common.loot.LootModifierManager();
    private final MetricsData metricsData = new MetricsData();
    private boolean enforceWhitelist;
    private boolean forceWorldUpgrade;
@@ -244,6 +245,7 @@
       this.dataManager.registerListener(this.lootManager);
       this.dataManager.registerListener(this.commandFunctionManager);
       this.dataManager.registerListener(this.advancementLoader);
+      dataManager.registerListener(lootManager);
       this.workerExecutor = Util.getServerWorkerExecutor();
       this.levelName = p_i50590_10_;
    }
@@ -331,6 +333,8 @@
       this.setLoadingStage(new TranslatableText("menu.loadingLevel"));
       WorldSaveHandler savehandler = this.getLevelStorage().createSaveHandler(saveName, this);
       this.loadWorldResourcePack(this.getLevelName(), savehandler);
+      // Move factory creation earlier to prevent startupquery deadlock
+      WorldGenerationProgressListener ichunkstatuslistener = this.worldGenerationProgressListenerFactory.create(11);
       LevelProperties worldinfo = savehandler.readProperties();
       LevelInfo worldsettings;
       if (worldinfo == null) {
@@ -352,13 +356,13 @@
 
       worldinfo.method_24285(this.getServerModName(), this.method_24307().isPresent());
       this.loadWorldDataPacks(savehandler.getWorldDir(), worldinfo);
-      WorldGenerationProgressListener ichunkstatuslistener = this.worldGenerationProgressListenerFactory.create(11);
       this.createWorlds(savehandler, worldinfo, worldsettings, ichunkstatuslistener);
       this.setDifficulty(this.getDefaultDifficulty(), true);
       this.prepareStartRegion(ichunkstatuslistener);
    }
 
    protected void createWorlds(WorldSaveHandler saveHandlerIn, LevelProperties info, LevelInfo worldSettingsIn, WorldGenerationProgressListener chunkStatusListenerIn) {
+      net.minecraftforge.common.DimensionManager.fireRegister();
       if (this.isDemo()) {
          info.loadLevelInfo(DEMO_LEVEL_INFO);
       }
@@ -402,6 +406,7 @@
          if (dimensiontype != DimensionType.OVERWORLD) {
             this.worlds.put(dimensiontype, new SecondaryServerWorld(serverworld1, this, this.workerExecutor, saveHandlerIn, dimensiontype, this.profiler, chunkStatusListenerIn));
          }
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(worlds.get(dimensiontype)));
       }
 
    }
@@ -560,6 +565,7 @@
       for(ServerWorld serverworld1 : this.getWorlds()) {
          if (serverworld1 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(serverworld1));
                serverworld1.close();
             } catch (IOException ioexception) {
                LOGGER.error("Exception closing the level", (Throwable)ioexception);
@@ -600,6 +606,7 @@
    public void run() {
       try {
          if (this.setupServer()) {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStarted(this);
             this.timeReference = Util.getMeasuringTimeMs();
             this.metadata.setDescription(new LiteralText(this.motd));
             this.metadata.setVersion(new ServerMetadata.Version(SharedConstants.getGameVersion().getName(), SharedConstants.getGameVersion().getProtocolVersion()));
@@ -631,9 +638,15 @@
                this.profiler.endTick();
                this.loading = true;
             }
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          } else {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
             this.setCrashReport((CrashReport)null);
          }
+      } catch (net.minecraftforge.fml.StartupQuery.AbortedException e) {
+         // ignore silently
+         net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
       } catch (Throwable throwable1) {
          LOGGER.error("Encountered an unexpected exception", throwable1);
          CrashReport crashreport;
@@ -650,6 +663,7 @@
             LOGGER.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          this.setCrashReport(crashreport);
       } finally {
          try {
@@ -658,6 +672,7 @@
          } catch (Throwable throwable) {
             LOGGER.error("Exception stopping the server", throwable);
          } finally {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopped(this);
             this.exit();
          }
 
@@ -759,6 +774,7 @@
 
    protected void tick(BooleanSupplier hasTimeLeft) {
       long i = Util.getMeasuringTimeNano();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPreServerTick();
       ++this.ticks;
       this.tickWorlds(hasTimeLeft);
       if (i - this.lastPlayerSampleUpdate >= 5000000000L) {
@@ -773,6 +789,7 @@
 
          Collections.shuffle(Arrays.asList(agameprofile));
          this.metadata.getPlayers().setSample(agameprofile);
+         this.metadata.invalidateJson();
       }
 
       if (this.ticks % 6000 == 0) {
@@ -800,6 +817,7 @@
       long i1 = Util.getMeasuringTimeNano();
       this.metricsData.pushSample(i1 - i);
       this.profiler.pop();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPostServerTick();
    }
 
    protected void tickWorlds(BooleanSupplier hasTimeLeft) {
@@ -807,7 +825,8 @@
       this.getCommandFunctionManager().tick();
       this.profiler.swap("levels");
 
-      for(ServerWorld serverworld : this.getWorlds()) {
+      for(ServerWorld serverworld : this.getWorldArray()) {
+         long tickStart = Util.getMeasuringTimeNano();
          if (serverworld.dimension.getType() == DimensionType.OVERWORLD || this.isNetherAllowed()) {
             this.profiler.push(() -> {
                return serverworld.getLevelProperties().getLevelName() + " " + Registry.DIMENSION_TYPE.getId(serverworld.dimension.getType());
@@ -819,6 +838,7 @@
             }
 
             this.profiler.push("tick");
+            net.minecraftforge.fml.hooks.BasicEventHooks.onPreWorldTick(serverworld);
 
             try {
                serverworld.tick(hasTimeLeft);
@@ -827,12 +847,16 @@
                serverworld.addDetailsToCrashReport(crashreport);
                throw new CrashException(crashreport);
             }
+            net.minecraftforge.fml.hooks.BasicEventHooks.onPostWorldTick(serverworld);
 
             this.profiler.pop();
             this.profiler.pop();
          }
+         perWorldTickTimes.computeIfAbsent(serverworld.getDimension().getType(), k -> new long[100])[this.ticks % 100] = Util.getMeasuringTimeNano() - tickStart;
       }
 
+      this.profiler.swap("dim_unloading");
+      net.minecraftforge.common.DimensionManager.unloadWorlds(this, this.ticks % 200 == 0);
       this.profiler.swap("connection");
       this.getNetworkIo().tick();
       this.profiler.swap("players");
@@ -873,6 +897,7 @@
       OptionSpec<Integer> optionspec10 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
       OptionSpec<String> optionspec11 = optionparser.accepts("serverId").withRequiredArg();
       OptionSpec<String> optionspec12 = optionparser.nonOptions();
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
 
       try {
          OptionSet optionset = optionparser.parse(p_main_0_);
@@ -883,7 +908,7 @@
 
          Path path = Paths.get("server.properties");
          ServerPropertiesLoader serverpropertiesprovider = new ServerPropertiesLoader(path);
-         serverpropertiesprovider.store();
+         if (optionset.has(optionspec1) || !Files.exists(path)) serverpropertiesprovider.store();
          Path path1 = Paths.get("eula.txt");
          EulaReader servereula = new EulaReader(path1);
          if (optionset.has(optionspec1)) {
@@ -905,6 +930,10 @@
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          UserCache playerprofilecache = new UserCache(gameprofilerepository, new File(s, USER_CACHE_FILE.getName()));
          String s1 = Optional.ofNullable(optionset.valueOf(optionspec9)).orElse(serverpropertiesprovider.getPropertiesHandler().levelName);
+         if (s1 == null || s1.isEmpty() || new File(s, s1).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            LOGGER.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s1);
+            return;
+         }
          final MinecraftDedicatedServer dedicatedserver = new MinecraftDedicatedServer(new File(s), serverpropertiesprovider, Schemas.getFixer(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache, WorldGenerationProgressLogger::new, s1);
          dedicatedserver.setUserName(optionset.valueOf(optionspec7));
          dedicatedserver.setServerPort(optionset.valueOf(optionspec10));
@@ -922,6 +951,7 @@
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
                dedicatedserver.stop(true);
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new UncaughtExceptionLogger(LOGGER));
@@ -966,7 +996,7 @@
    }
 
    public ServerWorld getWorld(DimensionType dimension) {
-      return this.worlds.get(dimension);
+      return net.minecraftforge.common.DimensionManager.getWorld(this, dimension, true, true);
    }
 
    public Iterable<ServerWorld> getWorlds() {
@@ -1005,7 +1035,7 @@
    }
 
    public String getServerModName() {
-      return "vanilla";
+      return net.minecraftforge.fml.BrandingControl.getServerBranding();
    }
 
    public CrashReport populateCrashReport(CrashReport report) {
@@ -1391,6 +1421,10 @@
    public CommandFunctionManager getCommandFunctionManager() {
       return this.commandFunctionManager;
    }
+   
+   public net.minecraftforge.common.loot.LootModifierManager getLootModifierManager() {
+	   return lootManager;
+   }
 
    public void reload() {
       if (!this.isOnThread()) {
@@ -1562,6 +1596,31 @@
 
    public abstract boolean isOwner(GameProfile profileIn);
 
+   private Map<DimensionType, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(DimensionType dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<DimensionType, ServerWorld> forgeGetWorldMap() {
+      return this.worlds;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerWorld[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   private ServerWorld[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.worlds.values().stream().toArray(x -> new ServerWorld[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void dump(Path p_223711_1_) throws IOException {
       Path path = p_223711_1_.resolve("levels");
 
