--- a/net/minecraft/block/AbstractRailBlock.java
+++ b/net/minecraft/block/AbstractRailBlock.java
@@ -36,7 +36,7 @@
    }
 
    public VoxelShape getOutlineShape(BlockState state, BlockView worldIn, BlockPos pos, EntityContext context) {
-      RailShape railshape = state.getBlock() == this ? state.get(this.getShapeProperty()) : null;
+      RailShape railshape = state.getBlock() == this ? getRailDirection(state, worldIn, pos, null) : null;
       return railshape != null && railshape.isAscending() ? ASCENDING_SHAPE : STRAIGHT_SHAPE;
    }
 
@@ -56,7 +56,7 @@
 
    public void neighborUpdate(BlockState state, World worldIn, BlockPos pos, Block blockIn, BlockPos fromPos, boolean isMoving) {
       if (!worldIn.isClient) {
-         RailShape railshape = state.get(this.getShapeProperty());
+         RailShape railshape = getRailDirection(state, worldIn, pos, null);
          boolean flag = false;
          BlockPos blockpos = pos.down();
          if (!topCoversMediumSquare(worldIn, blockpos)) {
@@ -115,7 +115,7 @@
    public void onBlockRemoved(BlockState state, World worldIn, BlockPos pos, BlockState newState, boolean isMoving) {
       if (!isMoving) {
          super.onBlockRemoved(state, worldIn, pos, newState, isMoving);
-         if (state.get(this.getShapeProperty()).isAscending()) {
+         if (getRailDirection(state, worldIn, pos, null).isAscending()) {
             worldIn.updateNeighborsAlways(pos.up(), this);
          }
 
@@ -134,5 +134,66 @@
       return blockstate.with(this.getShapeProperty(), flag ? RailShape.EAST_WEST : RailShape.NORTH_SOUTH);
    }
 
+   //Forge: Use getRailDirection(IBlockAccess, BlockPos, IBlockState, EntityMinecart) for enhanced ability
    public abstract Property<RailShape> getShapeProperty();
+
+   /* ======================================== FORGE START =====================================*/
+   /**
+    * Return true if the rail can make corners.
+    * Used by placement logic.
+    * @param world The world.
+    * @param pos Block's position in world
+    * @return True if the rail can make corners.
+    */
+   public boolean isFlexibleRail(BlockState state, BlockView world, BlockPos pos)
+   {
+       return !this.allowCurves;
+   }
+
+   /**
+    * Returns true if the rail can make up and down slopes.
+    * Used by placement logic.
+    * @param world The world.
+    * @param pos Block's position in world
+    * @return True if the rail can make slopes.
+    */
+   public boolean canMakeSlopes(BlockState state, BlockView world, BlockPos pos) {
+       return true;
+   }
+
+   /**
+    * Return the rail's direction.
+    * Can be used to make the cart think the rail is a different shape,
+    * for example when making diamond junctions or switches.
+    * The cart parameter will often be null unless it it called from EntityMinecart.
+    *
+    * @param world The world.
+    * @param pos Block's position in world
+    * @param state The BlockState
+    * @param cart The cart asking for the metadata, null if it is not called by EntityMinecart.
+    * @return The direction.
+    */
+   public RailShape getRailDirection(BlockState state, BlockView world, BlockPos pos, @javax.annotation.Nullable net.minecraft.entity.vehicle.AbstractMinecartEntity cart) {
+       return state.get(getShapeProperty());
+   }
+
+   /**
+    * Returns the max speed of the rail at the specified position.
+    * @param world The world.
+    * @param cart The cart on the rail, may be null.
+    * @param pos Block's position in world
+    * @return The max speed of the current rail.
+    */
+   public float getRailMaxSpeed(BlockState state, World world, BlockPos pos, net.minecraft.entity.vehicle.AbstractMinecartEntity cart) {
+       return 0.4f;
+   }
+
+   /**
+    * This function is called by any minecart that passes over this rail.
+    * It is called once per update tick that the minecart is on the rail.
+    * @param world The world.
+    * @param cart The cart on the rail.
+    * @param pos Block's position in world
+    */
+   public void onMinecartPass(BlockState state, World world, BlockPos pos, net.minecraft.entity.vehicle.AbstractMinecartEntity cart) { }
 }
